<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[如何抽象数据类型？]]></title>
      <url>http://Res2013.github.io/ss/2018/06/24/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><blockquote>
<p>&emsp;&emsp;在编程的时候，我们应该根据所要解决的问题来设计合适的数据类型。</p>
<p>&emsp;&emsp;类型具有两中信息：属性和操作。如：<code>int</code>类型的属性代表的是一个整数值，因此它们共享整数的属性，同时允许对<code>int</code>进行加、减、乘、除等操作，也仅能进行上述操作。</p>
<p>&emsp;&emsp;<code>int</code>类型是一个非常抽象的整数概念，数学家已经用正式的抽象方式定义了整数的属性，而要实现这一抽象概念需要依赖于具体的语言。</p>
</blockquote>
<a id="more"></a>
<h2 id="建立抽象"><a href="#建立抽象" class="headerlink" title="建立抽象"></a>建立抽象</h2><blockquote>
<p>&emsp;&emsp;假设现在需要解决一个问题，首先需要了解该问题的解决思路，然后根据需要抽象出该类型的属性以及相关操作。</p>
</blockquote>
<h2 id="建立接口"><a href="#建立接口" class="headerlink" title="建立接口"></a>建立接口</h2><blockquote>
<p>&emsp;&emsp;根据具体的编程语言来描述抽象出的属性及其相关操作，接口设计尽量与抽象出的属性和操作描述一致，即是需要提供类中属性和操作的原型。这些作用于设计出的类型的函数相当于<code>int</code>类型的内置运算符。</p>
</blockquote>
<h2 id="使用接口"><a href="#使用接口" class="headerlink" title="使用接口"></a>使用接口</h2><blockquote>
<p>&emsp;&emsp;根据建立的接口来编写程序，对于具体的实现细节是无感知的。</p>
</blockquote>
<h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><blockquote>
<p>&emsp;&emsp;使用具体的编程语言来编写代码实现接口</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>http://Res2013.github.io/ss/2018/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><blockquote>
<p>&emsp;&emsp;<strong>一个类中应该是一组相关性比较高的函数和数据的封装</strong>。单一职责的<strong>划分界限</strong>并不总是那么清晰，很多时候需要靠个人经验来界定。最大的问题就是对职责的定义，什么是类的职责，什么是函数的职责，以及怎么划分类、函数的职责。</p>
<p>&emsp;&emsp;作用：让各个<strong>功能独立</strong>出来，<strong>职责更清晰</strong>。同时也降低了类的<strong>耦合性</strong>，防止<strong>代码臃肿</strong>，<strong>鲁棒性</strong>更高。</p>
</blockquote>
<a id="more"></a>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><blockquote>
<p>&emsp;&emsp;<strong>软件中的类、模块、函数等应该对于扩展是开放的，对于修改是封闭的</strong>。对于修改关闭是为了防止升级和维护等原因需要对源码进行修改时，将错误引入了已经经过测试的旧代码中，破坏原有系统。同时对于扩展开放，可以让用户自定义接口实现想要的功能。开闭原则的重要手段是通过<strong>抽象类或接口</strong>。</p>
<p>作用：建立了一个<strong>稳定的、灵活的、可扩展性强的</strong>系统。</p>
</blockquote>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><blockquote>
<p>&emsp;&emsp;<strong>所有引用类的地方必须能够透明地使用其子类的对象</strong>。里氏替换原则的核心是<strong>抽象</strong>，而抽象又依赖于继承这个特性。继承的缺点如下三个：</p>
<ol>
<li><strong>侵入性</strong>：只要继承就必须拥有父类的属性和方法</li>
<li><strong>强耦合性</strong>：父类改变，子类就必须改变</li>
<li><strong>破坏封装性</strong>：父类的实现细节对于子类来说是透明的</li>
</ol>
<p>&emsp;&emsp;事物总是具有两面性，如何权衡利弊都需要根据具体情况来做出选择并加以处理。里氏替换原则指导通过抽象建立规范，具体的实现在运行时能够动态替换掉抽象，保证了系统的扩展性、灵活性。开闭原则和里氏替换原则往往是生死相依、不离不弃的。这两个原则都强调了一个<code>OOP</code>的重要特性—-<strong>抽象</strong>。</p>
<p>作用：指导构建<strong>扩展性</strong>更好的软件系统</p>
<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>&emsp;&emsp;<strong>依赖倒置原则指定了一种特定的解耦形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖方式被颠倒了</strong>。具体形式有以下几个关键点：</p>
<ol>
<li>高层模块不应该依赖于低层模块，两者都应该依赖其抽象</li>
<li>抽象不应该依赖细节</li>
<li>细节应该依赖抽象</li>
</ol>
<p>&emsp;&emsp;<strong>在Java语言中，抽象就是指接口或抽象类，两者都不能直接被实例化</strong>。细节就是实现类、接口或继承抽象类而产生的类，可以直接被实例化。那么在Java语言中的表现是：<strong>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的</strong>。</p>
<p>作用：<strong>依赖抽象</strong>而不依赖具体实现，让系统更加<strong>灵活</strong>，拥抱变化</p>
</blockquote>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><blockquote>
<p>&emsp;&emsp;<strong>类间的依赖关系应该建立在最小的接口上</strong>。接口隔离原则将非常庞大、臃肿的接口拆分成更小的和更具体的接口，用户只需要知道他们感兴趣的方法。说白了，接口隔离原则就是将庞大的接口拆分到更细粒度的接口中，让依赖的接口尽可能的小。示例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CloseUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable closeable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != closeable) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                 closeable.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>作用：<strong>降低耦合性、提高灵活性</strong></p>
</blockquote>
<h2 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h2><blockquote>
<p>&emsp;&emsp;<strong>一个对象应该对其它对象有最少的了解</strong>。迪米特法则有个英文解释是”Only talk to your immedate friends”，翻译过来就是”只与直接的朋友通信”。每个对象必然会与其它对象有耦合关系，耦合了之后就是朋友关系，如依赖、关联、组合、聚合等。</p>
<p>&emsp;&emsp;用户只和直接朋友(一般是<strong>接口或抽象类</strong>)通信，对于实现的细节是<strong>无感知</strong>的</p>
<p>&emsp;&emsp;作用：使得系统具有<strong>更低的耦合性和更好的扩展性</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[位操作]]></title>
      <url>http://Res2013.github.io/ss/2018/06/09/C++/%E4%BD%8D%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><blockquote>
<p>&emsp;&emsp;<strong>巧用：不借助第三变量交换两变量的值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// test.cpp</span><br><span class="line">void swap(int &amp;a,int &amp;b)// 别名a，b</span><br><span class="line">&#123;</span><br><span class="line">    a=a^b;</span><br><span class="line">    b=b^a;</span><br><span class="line">    a=a^b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;根据运算规则可推理：假设x = a ^ b，接着y = b ^ x = b ^ (a ^ b) = b ^ b ^ a = a；同理：a = x ^ y = (a^b) ^ a = a ^ a ^ b = b</p>
</blockquote>
<h2 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h2><blockquote>
<p>&emsp;&emsp;按位于运算符常用于<strong>掩码(mask)</strong>，<code>MASK</code>中的<strong>0</strong>隐藏了<code>flags</code>中相应的位。下面示例中的<strong>掩码宽度</strong>为<strong>2</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 伪代码</span><br><span class="line">flags = 10010110;</span><br><span class="line">MASK = 00000010;</span><br><span class="line">flags &amp;= MASK;// 结果为：00000010</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="打开位-设置位"><a href="#打开位-设置位" class="headerlink" title="打开位(设置位)"></a>打开位(设置位)</h2><blockquote>
<p>&emsp;&emsp;<strong>需要打开一个值中的特定位，同时保持其它位不变</strong>。<code>MASK</code>中为<code>1</code>的位全被打开。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 伪代码</span><br><span class="line">flags = 00001111</span><br><span class="line">MASK = 10110110</span><br><span class="line">flags |= MASK// 结果为：10111111</span><br></pre></td></tr></table></figure>
<h2 id="关闭位-清空位"><a href="#关闭位-清空位" class="headerlink" title="关闭位(清空位)"></a>关闭位(清空位)</h2><blockquote>
<p>&emsp;&emsp;<strong>需要在不影响其它位的前提下，关闭指定的位</strong>。<code>MASK</code>中为<code>1</code>的位全被关闭。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 伪代码</span><br><span class="line">flags = 00001111</span><br><span class="line">MASK = 10110110</span><br><span class="line">flags = flags &amp; ~MASK;// 结果为：00001001</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="切换位"><a href="#切换位" class="headerlink" title="切换位"></a>切换位</h2><blockquote>
<p>&emsp;&emsp;<strong>打开已关闭的位</strong>或<strong>关闭已打开的位</strong>。打开或关闭<code>MASK</code>中为<code>1</code>的位。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 伪代码</span><br><span class="line">flags = 00001111</span><br><span class="line">MASK = 10110110</span><br><span class="line">flags ^= MASK</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="检查位的值"><a href="#检查位的值" class="headerlink" title="检查位的值"></a>检查位的值</h2><blockquote>
<p>&emsp;&emsp;<strong>需要检查某位的值是否被设置为1</strong>。利用<code>MASK</code>中为<code>0</code>的覆盖其它位，只有1位比较。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flags = 00101111</span><br><span class="line">MASK = 00100000</span><br><span class="line">if ((flags &amp; MASK) == MASK) &#123;</span><br><span class="line">    // TODO:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="赋值高、低字节"><a href="#赋值高、低字节" class="headerlink" title="赋值高、低字节"></a>赋值高、低字节</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define BYTE_MASK 0xff</span><br><span class="line">unsigned long color = 0x002a162f;</span><br><span class="line">unsigned char red, blue;</span><br><span class="line">red = color &amp; BYTE_MASK;</span><br><span class="line">blue = (color &gt;&gt; 8) &amp; BYTE_MASK;</span><br></pre></td></tr></table></figure>
<h2 id="对齐特性-C11"><a href="#对齐特性-C11" class="headerlink" title="对齐特性(C11)"></a>对齐特性(C11)</h2><blockquote>
<p>&emsp;&emsp;对象在内存中存储位置的对齐。<code>_Alignof</code>运算符获取一个类型的对齐值，<code>_Alignas</code>说明符指定一个变量或类型的对齐值。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size_t f_align = _Alignof(float);</span><br><span class="line">_Alignas(double) char c1;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在程序中包含<code>stdalign.h</code>头文件，可以吧<code>alignas</code>和<code>alignof</code>分别作为<code>_Alignof</code>和<code>_Alignas</code>的别名，这样做可以与<code>C++</code>关键字匹配。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Proxy&Hook]]></title>
      <url>http://Res2013.github.io/ss/2018/06/08/Java%E5%9F%BA%E7%A1%80/Proxy&Hook/</url>
      <content type="html"><![CDATA[<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><blockquote>
<p>使用组合模式(<strong>has</strong>关系)</p>
</blockquote>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="接口动态代理"><a href="#接口动态代理" class="headerlink" title="接口动态代理"></a>接口动态代理</h4><blockquote>
<p>&emsp;&emsp;使用Proxy类和InvocationHandler接口</p>
</blockquote>
<h4 id="类动态代理"><a href="#类动态代理" class="headerlink" title="类动态代理"></a>类动态代理</h4><blockquote>
<p>&emsp;&emsp;使用cglib库</p>
</blockquote>
<a id="more"></a>
<h2 id="输出Proxy类"><a href="#输出Proxy类" class="headerlink" title="输出Proxy类"></a>输出Proxy类</h2><blockquote>
<p>&emsp;&emsp;Java中可以通过-D参数定义JVM系统参数，然后在代码中通过System.getProperty()获取系统参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JVM生成Proxy字节码文件，保存路径为：com/sun/proxy</span></span><br><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<!--more-->
<h2 id="查看代理类实现"><a href="#查看代理类实现" class="headerlink" title="查看代理类实现"></a>查看代理类实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jad.exe -sjava com/sun/proxy/$Proxy0.class</span><br></pre></td></tr></table></figure>
<blockquote>
<p>&emsp;&emsp;jd-gui或idea插件也都可以查看，即可知道代理对象的代理是InvocationHandler实现类对象，而该对象的代理又是实际真正执行方法的对象。</p>
<p>&emsp;&emsp;核心代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IProxyInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// h: InvocationHandler, m3: sayHelloMethod, var1: nameStr</span></span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">"herry.proxy.IProxyInterface"</span>).getMethod(<span class="string">"sayHello"</span>, Class.forName(<span class="string">"java.lang.String"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代理作用"><a href="#代理作用" class="headerlink" title="代理作用"></a>代理作用</h2><blockquote>
<p>&emsp;&emsp;代理机制进行API Hook进而达到方法增强(也可以方法拦截)是框架的常用手段，比如J2EE框架Spring通过动态代理优雅地实现了AOP编程，极大地提升了Web开发效率；Android网络框架Retrofit通过动态代理提升了网络请求的开发效率。</p>
</blockquote>
<h3 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h3><p>&emsp;&emsp;代理可以实现方法增强，比如常用的日志、方法耗时、缓存等。通过代理方法修改原方法的参数和返回值，就是代理Hook。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>&emsp;&emsp;被Hook的对象叫做<strong>Hook点</strong></p>
</blockquote>
<h3 id="易Hook的对象"><a href="#易Hook的对象" class="headerlink" title="易Hook的对象"></a>易Hook的对象</h3><blockquote>
<p>&emsp;&emsp;易找到、不易改变的对象好Hook，尤其是<strong>静态变量和单例</strong>。在一个进程中，静态变量和单例变量是相对不容易发生变化的，因此非常容易定位，而普通对象容易改变。</p>
</blockquote>
<h3 id="寻找合适的Hook点"><a href="#寻找合适的Hook点" class="headerlink" title="寻找合适的Hook点"></a>寻找合适的Hook点</h3><blockquote>
<p>&emsp;&emsp;分析<code>startActivity</code>方法的调用链，找出合适的Hook点。如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContextImpl.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    <span class="keyword">if</span> ((intent.getFlags()&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</span><br><span class="line">                <span class="string">"Calling startActivity() from outside of an Activity "</span></span><br><span class="line">                + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></span><br><span class="line">                + <span class="string">" Is this really what you want?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mMainThread.getInstrumentation().execStartActivity(</span><br><span class="line">        getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>,</span><br><span class="line">        (Activity)<span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;很明显<code>Activity</code>是<code>ActivityThread</code>的<code>mInstrumentation</code>成员执行<code>execStartActivity()</code>启动的，<code>ActivityThread</code>是主线程，而主线程仅有一个，<br>这里是个良好的<code>Hook</code>点。接下来把主线程里的<code>mInstrumentation</code>对象替换成我们修改过的代理对象。<code>ActivityThread</code>类里有个隐藏的静态方法<code>currentActivityThread</code>可以获得主线程引用，刚好可以使用反射很简单地获取到。如下所示：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; activityThreadClass = Class.forName(<span class="string">"android.app.ActivityThread"</span>);</span><br><span class="line">Method currentActivityThreadMethod = activityThreadClass.getDeclaredMethod(<span class="string">"currentActivityThread"</span>);</span><br><span class="line"><span class="comment">// 取消Java语言的安全检查，可以提升反射的速度</span></span><br><span class="line">currentActivityThreadMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object currentActivityThread = currentActivityThreadMethod.invoke(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>&emsp;&emsp;1. 寻找Hook点，原则是静态变量或单例对象，且尽量Hook public修饰的对象和方法，public保证版本的兼容性，一般不需要适配。</p>
<p>&emsp;&emsp;2. 选择合理的代理方式，如果是接口使用动态代理，如果是类可以利用多态并使用静态代理，也可以使用cglib库。</p>
<p>&emsp;&emsp;3. 偷梁换柱—-使用反射将原始对象替换成代理对象。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C结构体对齐规则]]></title>
      <url>http://Res2013.github.io/ss/2018/06/08/C++/C%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>&emsp;&emsp;1. <strong>offsetof</strong>，用于求结构体中一个成员在该结构体中的偏移量</p>
<p>&emsp;&emsp;2. <strong>alignof</strong>，用于求一个类型的对齐值</p>
<p>&emsp;&emsp;3. <strong>sizeof</strong>，用于求一个变量或类型的大小</p>
<p>&emsp;&emsp;4. 对于<strong>所有基本类型</strong>，<strong>alignof(T) == sizeof(T)</strong></p>
</blockquote>
<h2 id="结构体对齐规则"><a href="#结构体对齐规则" class="headerlink" title="结构体对齐规则"></a>结构体对齐规则</h2><blockquote>
<p>&emsp;&emsp;1. 结构体变量中<strong>成员的偏移量</strong>必须是该<strong>成员类型对齐值</strong>的<strong>整数倍</strong>。否则，它与前一个成员变量之间要<strong>填充(padding)</strong>一些无意义的字节来满足<br>&emsp;&emsp;2. 结构体大小必须是其中<strong>所有成员类型</strong>中<strong>对齐值最大者</strong>的整数倍。否则，在最后一个成员后面<strong>填充(padding)</strong></p>
</blockquote>
<a id="more"></a>
<p>举例说明：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">char</span> a;<span class="comment">// align : 1, sizeof : 1, offset : 0bytes</span></span><br><span class="line">  <span class="keyword">char</span> padding1[<span class="number">3</span>];<span class="comment">// 3bytes</span></span><br><span class="line">	<span class="keyword">float</span> b;<span class="comment">// align : 4, sizeof : 4, offset : 4bytes</span></span><br><span class="line">	<span class="keyword">int</span> c;<span class="comment">// align : 4, sizeof : 4, offset : 8bytes</span></span><br><span class="line">  <span class="keyword">char</span> padding2[<span class="number">4</span>];<span class="comment">// 4bytes</span></span><br><span class="line">	<span class="keyword">double</span> d;<span class="comment">// align : 8, sizeof : 8, offset : 16bytes</span></span><br><span class="line">	<span class="keyword">unsigned</span> e;<span class="comment">// align : 4, sizeof : 4, offset : 24bytes</span></span><br><span class="line">  <span class="keyword">char</span> padding3[<span class="number">4</span>];<span class="comment">// 4bytes</span></span><br><span class="line">&#125; T;<span class="comment">// align : 8, sizeof : 32bytes</span></span><br></pre></td></tr></table></figure></p>
<p>解释如下：</p>
<blockquote>
<p>&emsp;&emsp;由<strong>第1条规则</strong>可知：成员<code>a</code>和<code>b</code>之间需要<code>padding</code>3个字节，成员<code>c</code>和<code>d</code>之间需要<code>padding</code>4个字节</p>
<p>&emsp;&emsp;由<strong>第2条规则</strong>可知：成员<code>e</code>后面需要<code>padding</code>4个字节</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[偏移地址]]></title>
      <url>http://Res2013.github.io/ss/2018/06/08/Java%E5%9F%BA%E7%A1%80/%E5%81%8F%E7%A7%BB%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>JDK提供了<code>sun.misc.Unsafe</code>计算字段的偏移地址</p>
</blockquote>
<a id="more"></a>
<h3 id="反射获取Unsafe对象"><a href="#反射获取Unsafe对象" class="headerlink" title="反射获取Unsafe对象"></a>反射获取Unsafe对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field unsafeField = Unsafe.class.getDeclaredField(<span class="string">"theUnsafe"</span>);</span><br><span class="line">        unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (Unsafe) unsafeField.get(<span class="keyword">null</span>);<span class="comment">// or Unsafe.class</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取偏移地址"><a href="#获取偏移地址" class="headerlink" title="获取偏移地址"></a>获取偏移地址</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VO.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> b = <span class="number">19l</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OffsetTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OffsetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Unsafe unsafe = UnsafeUtils.getInstance();</span><br><span class="line">            <span class="keyword">long</span> aFieldOffset = unsafe.staticFieldOffset(VO.class.getField(<span class="string">"a"</span>));</span><br><span class="line">            <span class="keyword">long</span> bFieldOffset = unsafe.objectFieldOffset(VO.class.getDeclaredField(<span class="string">"b"</span>));</span><br><span class="line">            System.out.println(<span class="string">"aFieldOffset is: "</span> + aFieldOffset);</span><br><span class="line">            System.out.println(<span class="string">"bFieldOffset is: "</span> + bFieldOffset);</span><br><span class="line">            VO vo = <span class="keyword">new</span> VO();</span><br><span class="line">            <span class="keyword">long</span> bFieldValue = unsafe.getLong(vo, bFieldOffset);</span><br><span class="line">            System.out.println(<span class="string">"bFieldValue is: "</span> + bFieldValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[断点调试Gradle插件]]></title>
      <url>http://Res2013.github.io/ss/2018/05/25/Gradle%E7%B3%BB%E5%88%97/%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95Gradle%20Plugin/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Windows系统下使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET GRADLE_OPTS=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot;</span><br><span class="line"></span><br><span class="line">// 一直等待，直到attach到调试进程</span><br><span class="line">gradlew :app:taskName -Dorg.gradle.debug=true --no-daemon</span><br></pre></td></tr></table></figure></p>
<p>在Android Studio或Intellij Idea的”Run/Debug Configurations”中添加Remote，host设置为”localhost”，端口号设置为”5005”，然后attach到调试进程上即可。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义Gradle Plugin]]></title>
      <url>http://Res2013.github.io/ss/2018/05/24/Gradle%E7%B3%BB%E5%88%97/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%20Plugin/</url>
      <content type="html"><![CDATA[<h2 id="新建独立工程"><a href="#新建独立工程" class="headerlink" title="新建独立工程"></a>新建独立工程</h2><blockquote>
<p>通过Intellij新建一个Gradle工程，build.gradle内容如下所示：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">//classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'</span></span><br><span class="line">        <span class="comment">//classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line">apply plugin: <span class="string">'maven'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> gradleApi()</span><br><span class="line">    <span class="keyword">compile</span> localGroovy()</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.tools.build:gradle:2.3.3'</span></span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    <span class="keyword">repositories</span>.mavenDeployer &#123;</span><br><span class="line">        snapshotRepository(url: <span class="string">'http://192.168.x.xx:18082/nexus/content/repositories/snapshots'</span>) &#123;</span><br><span class="line">            authentication(userName: <span class="string">'xxx'</span>, password: <span class="string">'xxx'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        repository(url: <span class="string">'http://192.168.x.xx:18082/nexus/content/repositories/releases'</span>) &#123;</span><br><span class="line">            authentication(userName: <span class="string">'xxx'</span>, password: <span class="string">'xxx'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        pom.<span class="keyword">project</span> &#123;</span><br><span class="line">            version <span class="string">'1.0.1-SNAPSHOT'</span></span><br><span class="line">            artifactId <span class="string">'myplugin'</span><span class="comment">//模块名</span></span><br><span class="line">            groupId <span class="string">'com.example.herry'</span><span class="comment">//包名</span></span><br><span class="line">            packaging <span class="string">'jar'</span></span><br><span class="line">            <span class="keyword">description</span> <span class="string">'custom plugin test'</span><span class="comment">//描述</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>*.groovy文件内容如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> practice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> groovy.xml.XmlUtil</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.build.gradle.api.ApplicationVariant</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    Project project</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        <span class="keyword">this</span>.project = project</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!project.plugins.hasPlugin(<span class="string">'com.android.application'</span>)) &#123;</span><br><span class="line">            System.err.println(<span class="string">"application required!"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        project.afterEvaluate &#123;</span><br><span class="line">            project.android.applicationVariants.each &#123; ApplicationVariant variant -&gt;</span><br><span class="line">                String variantName = variant.name.capitalize()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">def</span> mergeManifestTask = project.tasks.getByName(<span class="string">"process$&#123;variantName&#125;Manifest"</span>)</span><br><span class="line">                mergeManifestTask.doLast &#123; mm -&gt;</span><br><span class="line">                    <span class="keyword">def</span> manifest = mm.manifestOutputFile</span><br><span class="line">                    <span class="keyword">if</span> (project.hasProperty(<span class="string">"channel"</span>)) &#123;</span><br><span class="line">                        addChannel(manifest)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> addChannel(File manifest) &#123;</span><br><span class="line">        <span class="keyword">def</span> xml = <span class="keyword">new</span> XmlParser().parse(manifest)</span><br><span class="line">        <span class="keyword">def</span> channelNum = project.property(<span class="string">"channel"</span>)</span><br><span class="line"></span><br><span class="line">        xml.application[<span class="number">0</span>].appendNode(<span class="string">"meta-data"</span>, [<span class="string">'android:name'</span>: <span class="string">'channel'</span>, <span class="string">'android:value'</span>: channelNum])</span><br><span class="line"></span><br><span class="line">        manifest.withPrintWriter(<span class="string">"UTF-8"</span>) &#123;</span><br><span class="line">            XmlUtil.serialize(xml, it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>插件类配置图如下所示：<br><img src="https://upload-images.jianshu.io/upload_images/2220473-b2161bc19065ac39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件类配置"><br><code>myplugin.properties</code>文件的名字就是需要使用该插件的时候使用的字符串，如：<code>apply plugin: &#39;myplugin&#39;</code></p>
<p>通过gradlew uploadArchives上传到Nexus服务器</p>
</blockquote>
<h2 id="Android工程引用"><a href="#Android工程引用" class="headerlink" title="Android工程引用"></a>Android工程引用</h2><blockquote>
<p>Android工程root目录下build.gradle代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &apos;http://192.168.1.32:18082/nexus/content/repositories/snapshots&apos; &#125;</span><br><span class="line">        maven &#123; url &apos;http://192.168.1.32:18082/nexus/content/repositories/releases&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</span><br><span class="line">        classpath &apos;com.example.herry:myplugin:1.0.1-SNAPSHOT&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Moudle下的build.gradle直接这样使用即可，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;myplugin&apos;</span><br></pre></td></tr></table></figure></p>
<p>注意：刷新<code>SNAPSHOT</code>快照版缓存需要用到以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.cacheChangingModulesFor  0,&apos;seconds&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单独工程自定义Task]]></title>
      <url>http://Res2013.github.io/ss/2018/05/24/Gradle%E7%B3%BB%E5%88%97/%E5%8D%95%E7%8B%AC%E5%B7%A5%E7%A8%8B%E8%87%AA%E5%AE%9A%E4%B9%89Task/</url>
      <content type="html"><![CDATA[<h2 id="Intellij新建独立工程"><a href="#Intellij新建独立工程" class="headerlink" title="Intellij新建独立工程"></a>Intellij新建独立工程</h2><blockquote>
<p>通过Intellij新建一个Gradle工程，build.gradle内容如下所示：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line">apply plugin: <span class="string">'maven'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> gradleApi()</span><br><span class="line">    testCompile <span class="keyword">group</span>: <span class="string">'junit'</span>, name: <span class="string">'junit'</span>, version: <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    <span class="keyword">repositories</span>.mavenDeployer &#123;</span><br><span class="line">        snapshotRepository(url: <span class="string">'http://192.168.x.xx:18082/nexus/content/repositories/snapshots'</span>) &#123;</span><br><span class="line">            authentication(userName: <span class="string">'xxx'</span>, password: <span class="string">'xxx'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        repository(url: <span class="string">'http://192.168.x.xx:18082/nexus/content/repositories/releases'</span>) &#123;</span><br><span class="line">            authentication(userName: <span class="string">'xxx'</span>, password: <span class="string">'xxx'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        pom.<span class="keyword">project</span> &#123;</span><br><span class="line">            version <span class="string">'1.0.1-SNAPSHOT'</span></span><br><span class="line">            artifactId <span class="string">'plugintest'</span><span class="comment">//模块名</span></span><br><span class="line">            groupId <span class="string">'com.example.herry'</span><span class="comment">//包名</span></span><br><span class="line">            packaging <span class="string">'jar'</span></span><br><span class="line">            <span class="keyword">description</span> <span class="string">'custom task test'</span><span class="comment">//描述</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>*.groovy文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package practice</span><br><span class="line">import org.gradle.api.*</span><br><span class="line">import org.gradle.api.tasks.*</span><br><span class="line"></span><br><span class="line">class HelloTestTask extends DefaultTask &#123;</span><br><span class="line"></span><br><span class="line">	@Optional</span><br><span class="line">	String message = &apos;I\&apos;m herry&apos;</span><br><span class="line"></span><br><span class="line">	@TaskAction</span><br><span class="line">	def hello() &#123;</span><br><span class="line">		println &quot;hello world $message in custom plugin.&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过gradlew uploadArchives上传到Nexus服务器</p>
</blockquote>
<h2 id="Android工程引用"><a href="#Android工程引用" class="headerlink" title="Android工程引用"></a>Android工程引用</h2><blockquote>
<p>Android工程root目录下build.gradle代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &apos;http://192.168.x.xx:18082/nexus/content/repositories/snapshots&apos; &#125;</span><br><span class="line">        maven &#123; url &apos;http://192.168.x.xx:18082/nexus/content/repositories/releases&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</span><br><span class="line">        classpath group: &apos;com.example.herry&apos;, name: &apos;plugintest&apos;, version: &apos;1.0.1-SNAPSHOT&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Moudle下的build.gradle直接这样使用即可，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task hello(type: practice.HelloTestTask)</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OkHttp加解密拦截器]]></title>
      <url>http://Res2013.github.io/ss/2018/05/24/Android/OkHttp%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="拦截器使用"><a href="#拦截器使用" class="headerlink" title="拦截器使用"></a>拦截器使用</h2><blockquote>
<p>&emsp;&emsp;加、解密写到同一个拦截器里，如下所示：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request request = chain.request();</span><br><span class="line">    String url = request.url().toString();</span><br><span class="line">    String method = request.method();</span><br><span class="line">    Log.i(TAG, <span class="string">"url为:"</span> + url + <span class="string">"\nmethod为:"</span> + method);</span><br><span class="line">    request = encrypt(request);</span><br><span class="line">    Response response = chain.proceed(request);</span><br><span class="line">    response = decrypt(response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">encrypt</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RequestBody requestBody = request.body();</span><br><span class="line">    <span class="keyword">if</span> (requestBody != <span class="keyword">null</span>) &#123;</span><br><span class="line">        okio.Buffer buffer = <span class="keyword">new</span> okio.Buffer();</span><br><span class="line">        requestBody.writeTo(buffer);</span><br><span class="line">        Charset charset = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">        MediaType contentType = requestBody.contentType();</span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            charset = contentType.charset(charset);</span><br><span class="line">        &#125;</span><br><span class="line">        String string = buffer.readString(charset);</span><br><span class="line">        Log.i(TAG, <span class="string">"请求的原数据为:"</span> + string);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> encrypt</span></span><br><span class="line">        String encryptStr = encrypt(string);</span><br><span class="line">        RequestBody body = MultipartBody.create(contentType, encryptStr);</span><br><span class="line">        Request.Builder builder = request</span><br><span class="line">                        .newBuilder()</span><br><span class="line">                        .post(body)</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Response <span class="title">decrypt</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">        <span class="comment">//the response data</span></span><br><span class="line">        ResponseBody body = response.body();</span><br><span class="line">        BufferedSource source = body.source();</span><br><span class="line">        source.request(Long.MAX_VALUE);</span><br><span class="line">        <span class="comment">// Buffer the entire body</span></span><br><span class="line">        Buffer buffer = source.buffer();</span><br><span class="line">        Charset charset = Charset.defaultCharset();</span><br><span class="line">        MediaType contentType = body.contentType();</span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            charset = contentType.charset(charset);</span><br><span class="line">        &#125;</span><br><span class="line">        String decryptStr = buffer.clone().readString(charset);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> decrypt</span></span><br><span class="line">        String string = decrypt(decryptStr);</span><br><span class="line">        Log.i(TAG, <span class="string">"响应的数据解密后为:"</span> + string );</span><br><span class="line">        ResponseBody responseBody = ResponseBody.create(contentType, bodyString);</span><br><span class="line">        response = response.newBuilder().body(responseBody).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JNI知识点]]></title>
      <url>http://Res2013.github.io/ss/2018/04/25/NDK%E5%BC%80%E5%8F%91/JNI%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>Java JNI原意是Java Native Interface，它是为了方便Java调用C、C++等本地代码所封装的一层接口。</p>
<p>NDK是Android所提供的一个工具集合，通过NDK可以在Android中更加方便地通过JNI来访问本地代码。</p>
</blockquote>
<h2 id="Native优缺点"><a href="#Native优缺点" class="headerlink" title="Native优缺点"></a>Native优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote>
<ol>
<li>由于so库反编译比较困难，因此提高代码的安全性。</li>
<li>可以方便地使用目前已有的C/C++开源库。</li>
<li>方便移植到其它平台。</li>
<li>在Native中创建的资源存在于Native Heap上，需要主动去释放它，对于应用而言没有OOM的问题，并且也不需要考虑GC时锁线程带来的掉帧。如Facebook的Fresco框架就是将图片缓存到Native Heap上。</li>
<li>在Dalvik虚拟机中，会省去由JIT编译期转为本地代码的步骤</li>
</ol>
</blockquote>
<a id="more"></a>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote>
<ol>
<li>在JDK1.6版本时，Java调用JNI的耗时是Java调用Java的5倍。随着JDK版本升级，差距慢慢减小。</li>
<li>Java与Native通信，需要多出一些系统开销。</li>
<li>需要对不同的处理器架构进行支持，存在明显的兼容性问题。</li>
</ol>
</blockquote>
<h2 id="JNI基本知识"><a href="#JNI基本知识" class="headerlink" title="JNI基本知识"></a>JNI基本知识</h2><h3 id="Java示例"><a href="#Java示例" class="headerlink" title="Java示例"></a>Java示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"jni-test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JNI头文件"><a href="#JNI头文件" class="headerlink" title="JNI头文件"></a>JNI头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class test_androidtest_nativ_JniTest */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_test_androidtest_nativ_JniTest</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_test_androidtest_nativ_JniTest</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     test_androidtest_nativ_JniTest</span><br><span class="line"> * Method:    get</span><br><span class="line"> * Signature: ()Ljava/lang/String;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_test_androidtest_nativ_JniTest_get</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     test_androidtest_nativ_JniTest</span><br><span class="line"> * Method:    set</span><br><span class="line"> * Signature: (Ljava/lang/String;)V</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_test_androidtest_nativ_JniTest_set</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject, jstring)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h3 id="实现JNI方法"><a href="#实现JNI方法" class="headerlink" title="实现JNI方法"></a>实现JNI方法</h3><h4 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"test_androidtest_nativ_JniTest.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_test_androidtest_nativ_JniTest_get</span><span class="params">(JNIEnv *env, jobject thiz)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Invoke the get function in C++!\n"</span>);</span><br><span class="line">    return env-&gt;NewStringUTF(<span class="string">"Hello from JNI!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_test_androidtest_nativ_JniTest_set</span><span class="params">(JNIEnv *env, jobject thiz, jstring <span class="built_in">string</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Invoke the set function in C++!\n"</span>);</span><br><span class="line">    <span class="keyword">char</span>* str = env-&gt;GetStringUTFChars(string, NULL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(<span class="built_in">string</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="C实现"><a href="#C实现" class="headerlink" title="C实现"></a>C实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"test_androidtest_nativ_JniTest.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_test_androidtest_nativ_JniTest_get</span><span class="params">(JNIEnv *env, jobject thiz)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Invoke the get function in C!\n"</span>);</span><br><span class="line">    return (*env)-&gt;NewStringUTF(env, <span class="string">"Hello from JNI!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_test_androidtest_nativ_JniTest_set</span><span class="params">(JNIEnv *env, jobject thiz, jstring <span class="built_in">string</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Invoke the set function in C!\n"</span>);</span><br><span class="line">    <span class="keyword">char</span>* str = (*env)-&gt;GetStringUTFChars(env, string, NULL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, <span class="built_in">string</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JNI原理"><a href="#JNI原理" class="headerlink" title="JNI原理"></a>JNI原理</h3><blockquote>
<p><strong>jni.h</strong>头文件部分内容如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Reference types, in C++</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">typedef</span> _jstring*       jstring;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* not __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Reference types, in C.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">typedef</span> jobject         jstring;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* not __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="keyword">typedef</span> _JNIEnv JNIEnv;</span><br><span class="line"><span class="keyword">typedef</span> _JavaVM JavaVM;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">struct</span> JNINativeInterface* JNIEnv;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">struct</span> JNIInvokeInterface* JavaVM;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Table of interface function pointers.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">struct</span> JNINativeInterface &#123;</span><br><span class="line">    ...</span><br><span class="line">    jstring     (*NewStringUTF)(JNIEnv*, <span class="keyword">const</span> <span class="keyword">char</span>*);<span class="comment">// 声明特定输入、输出类型的函数指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JNI spec says this returns const jbyte*, but that's inconsistent */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* (*GetStringUTFChars)(JNIEnv*, jstring, jboolean*);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>        (*ReleaseStringUTFChars)(JNIEnv*, jstring, <span class="keyword">const</span> <span class="keyword">char</span>*);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * C++ object wrapper.</span><br><span class="line"> *</span><br><span class="line"> * This is usually overlaid on a C struct whose first element is a</span><br><span class="line"> * JNINativeInterface*.  We rely somewhat on compiler behavior.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">struct</span> _JNIEnv &#123;</span><br><span class="line">    <span class="comment">/* do not rename this; it does not seem to be entirely opaque */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> JNINativeInterface* functions;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function">jstring <span class="title">NewStringUTF</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* bytes)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        return functions-&gt;NewStringUTF(this, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">GetStringUTFChars</span><span class="params">(jstring <span class="built_in">string</span>, jboolean* isCopy)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        return functions-&gt;GetStringUTFChars(this, string, isCopy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReleaseStringUTFChars</span><span class="params">(jstring <span class="built_in">string</span>, <span class="keyword">const</span> <span class="keyword">char</span>* utf)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        functions-&gt;ReleaseStringUTFChars(<span class="keyword">this</span>, <span class="built_in">string</span>, utf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="JNI类型签名"><a href="#JNI类型签名" class="headerlink" title="JNI类型签名"></a>JNI类型签名</h3><blockquote>
<p>类型签名标识了一个特定的Java类型，这个类型可以是基本数据类型、数组类型、引用对象类型和方法。</p>
</blockquote>
<h4 id="基本数据类型签名"><a href="#基本数据类型签名" class="headerlink" title="基本数据类型签名"></a>基本数据类型签名</h4><blockquote>
<p>基本数据类型签名采用一系列大写字母来表示。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Java类型</th>
<th style="text-align:center">签名</th>
<th>Java类型</th>
<th style="text-align:center">签名</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td style="text-align:center">Z</td>
<td>long</td>
<td style="text-align:center">J</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:center">B</td>
<td>float</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:center">C</td>
<td>double</td>
<td style="text-align:center">D</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:center">S</td>
<td>void</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:center"></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="数组签名"><a href="#数组签名" class="headerlink" title="数组签名"></a>数组签名</h4><blockquote>
<p>数组签名为<strong>[+类型签名</strong>，如<code>String[]</code>的签名为<code>[Ljava/lang/String;</code>。</p>
</blockquote>
<h4 id="引用对象类型签名"><a href="#引用对象类型签名" class="headerlink" title="引用对象类型签名"></a>引用对象类型签名</h4><blockquote>
<p>引用对象类型签名比较简单，它采用”<strong>L+包名+类名+;</strong>“的形式，比如java.lang.String的签名为Ljava/lang/String;。</p>
<p>多维数组的签名为<strong>n个[+类型签名</strong>，其中<code>n</code>表示数组的维度。比如<code>int[][]</code>类型的签名为[[I。</p>
</blockquote>
<h4 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h4><blockquote>
<p>方法签名为<strong>(参数类型签名)+返回值类型签名</strong>，如<code>boolean func(int a, double b, int[] c)</code>的签名为<code>(ID[I)Z</code>；<code>boolean func(int a, String b, int[] c)</code>类型为<code>(ILjava/lang/String;[I)Z</code></p>
</blockquote>
<h3 id="JNI调用Java"><a href="#JNI调用Java" class="headerlink" title="JNI调用Java"></a>JNI调用Java</h3><blockquote>
<p>调用流程为：调用<code>Java</code>中静态方法先通过类名找到类，然后再根据方法名找到方法<code>id</code>，最后就可以调用这个方法。调用<code>Java</code>中非静态方法需要构造出类的对下你给后才能调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodCalledByJni</span><span class="params">(String msgFromJni)</span> </span>&#123;</span><br><span class="line">    Log.e(<span class="string">"test"</span>, <span class="string">"method called by jni, msg: "</span> + msgFromJni);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callJavaMethod</span><span class="params">(JNIEnv *env, jobject thiz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据类名找到Class对象</span></span><br><span class="line">    jclass clazz = env-&gt;FindClass(<span class="string">"test/androidtest/MainActivity"</span>);</span><br><span class="line">    <span class="keyword">if</span> (clazz == NULL) &#123;</span><br><span class="line">        printf(<span class="string">"find class MainActivity error!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据方法名找到方法ID(需要方法签名)</span></span><br><span class="line">    jmethodId id = env-&gt;GetStaticMethodID(clazz, <span class="string">"methodCalledByJni"</span>, <span class="string">"(Ljava/lang/String;)V"</span>);</span><br><span class="line">    <span class="keyword">if</span> (id == NULL) &#123;</span><br><span class="line">        printf(<span class="string">"find method methodCalledByJni error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    jstring msg = env-&gt;NewStringUTF(<span class="string">"msg sended by callJavaMethod in jnitest.cpp."</span>);</span><br><span class="line">    <span class="comment">// 通过JNIEnv对象调动静态方法</span></span><br><span class="line">    env-&gt;CallStaticVoidMethod(clazz, id, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function">jstring <span class="title">Java_test_androidtest_MainActivity_get</span><span class="params">(JNIEnv *env, jobject thiz)</span> </span>&#123;</span><br><span class="line">    printf(<span class="string">"invoke get in C++!\n"</span>);</span><br><span class="line">    callJavaMethod(env, thiz);</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"Hello from JNI in libjni-test.so!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从Java调用JNI然后再从JNI中调用Java方法完成了一次JNI调用Java方法的过程。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle基础]]></title>
      <url>http://Res2013.github.io/ss/2018/04/12/Gradle%E7%B3%BB%E5%88%97/Gradle%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="领域对象"><a href="#领域对象" class="headerlink" title="领域对象"></a>领域对象</h2><blockquote>
<p><code>Gradle</code>只提供构建项目的框架，真正起作用的是<code>Plugin</code>。<code>Gradle</code>不仅引入了<code>Task</code>和<code>Property</code>还引入了<code>Gradle</code>项目的构建生命周期，常见的如<code>Java Plugin</code>和<code>Android Plugin</code>。</p>
<p><code>Gradle</code>本身的领域对象主要有<code>Project</code>和<code>Task</code>。<code>Project</code>为<code>Task</code>提供了执行上下文，所有的<code>Plugin</code>要么向<code>Project</code>中添加用于配置的<code>Property</code>，要么向<code>Project</code>中添加不同的<code>Task</code>。一个<code>Task</code>表示一个逻辑上较为独立的执行过程。</p>
<p>在没有显示指定调用对象的情况下，<code>Gradle</code>会自动将调用对象设置成当前<code>Project</code>。具体使用，请查看文档<code>Project</code>类的方法。</p>
</blockquote>
<h2 id="任务-Task"><a href="#任务-Task" class="headerlink" title="任务(Task)"></a>任务(<strong>Task</strong>)</h2><a id="more"></a>
<h3 id="查看任务"><a href="#查看任务" class="headerlink" title="查看任务"></a>查看任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew tasks</span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote>
<p><code>&lt;&lt;</code>相当于<code>doLast</code>，<code>&gt;&gt;</code>相当于<code>doFirst</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">project.task(&apos;showTime&apos;) &#123;// 任务</span><br><span class="line">            doLast &#123;</span><br><span class="line">                println &quot;Current time is &quot; + new Date().format(project.dateAndTime.timeFormat)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">project.tasks.create(&apos;showDate&apos;) &#123;// 任务</span><br><span class="line">            doLast &#123;</span><br><span class="line">                println &quot;Current date is &quot; + new Date().format(project.dateAndTime.dateFormat)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><blockquote>
<p>默认类型是<code>DefaultTask</code>，也可以定义一个<code>Task</code>时的默认类型，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">task copyFile(type: Copy) &#123;// 相对于当前Project，即build.gralde所在目录</span><br><span class="line">    from &apos;src&apos;</span><br><span class="line">    into &apos;dest&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="输入和输出类型"><a href="#输入和输出类型" class="headerlink" title="输入和输出类型"></a>输入和输出类型</h4><blockquote>
<p>每个<code>Task</code>都有<code>inputs</code>和<code>outputs</code>属性，他们的类型分别为<code>TaskInputs</code>和<code>TaskOutputs</code>。输入和输出可以是文件也可以是文件夹，还可以是<code>Project</code>的某个<code>Property</code>或闭包所定义的条件。</p>
<p>对于<code>outputs</code>我们可以使用<code>upToDateWhen()</code>方法来决定一个<code>Task</code>的<code>outputs</code>是否为最新的。这也是<code>Gradle</code>中的增量式构建的机制。</p>
<p>Task执行时出现<code>UP-TO-DATE</code>代表它是最新的，不会重新执行。</p>
</blockquote>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><blockquote>
<p>执行<code>taskA</code>时，<code>Gradle</code>会先执行<code>taskB</code>，再执行<code>taskA</code>。</p>
<p>显示指定<code>Module</code>所有依赖<code>gradlew :app:dependencies</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task taskA(dependsOn: taskB) &#123;// 1st dep</span><br><span class="line">   // do sth</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">task taskA &lt;&lt; &#123;// 2nd dep</span><br><span class="line">    println &apos;hello world&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">taskA.dependsOn taskB</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="创建Task"><a href="#创建Task" class="headerlink" title="创建Task"></a>创建Task</h3><blockquote>
<ol>
<li>调用<code>Project</code>的<code>task()</code>方法创建</li>
<li>通过<code>TaskContainer</code>的<code>create()</code>方法创建</li>
</ol>
<p>对于每一个<code>Task</code>，<code>Gradle</code>都会在<code>Project</code>中创建一个同名的<code>Property</code>，我们可以把<code>Task</code>当做<code>Property</code>来访问。另外，<code>Gradle</code>也会创建一个同名的方法。该方法接受一个闭包参数，可以用来配置<code>Task</code>。</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasks.create(name: &apos;taskC&apos;) &lt;&lt; &#123;</span><br><span class="line">    println &apos;Hello world!&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="配置Task"><a href="#配置Task" class="headerlink" title="配置Task"></a>配置Task</h3><blockquote>
<p><code>Task</code>除了执行操作，还可以包含多个<code>Property</code>，如默认定义的<code>description</code>、<code>logger</code>等。特定的<code>Task</code>类型还包含特定的<code>Property</code>，如<code>Copy</code>类型的<code>from</code>和<code>to</code>等。当然也可以动态地向<code>Task</code>中加入额外的<code>Property</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">task taskA &lt;&lt; &#123;</span><br><span class="line">    description = &quot;this is taskA&quot;</span><br><span class="line">    println description</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">task taskB &lt;&lt; &#123;</span><br><span class="line">    println description</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">taskB &#123;</span><br><span class="line">    description = &quot;this is taskB&quot;// 配置阶段Gradle框架会扫描整个build.gradle然后设置description，执行阶段就可以正常输出了</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">task taskC &lt;&lt; &#123;</span><br><span class="line">    println description</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">taskC.configure &#123;// 通过configure()方法完成配置</span><br><span class="line">    description = &quot;this is taskC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><blockquote>
<p>所有的<code>Task</code>都位于<code>Project</code>的<code>TaskContainer</code>中，<code>TaskContainer</code>就是<code>Project</code>中的<code>tasks</code>属性</p>
</blockquote>
<h2 id="属性-Property"><a href="#属性-Property" class="headerlink" title="属性(Property)"></a>属性(<strong>Property</strong>)</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew properties</span><br></pre></td></tr></table></figure>
<h3 id="内置属性"><a href="#内置属性" class="headerlink" title="内置属性"></a>内置属性</h3><blockquote>
<ol>
<li><code>project</code>：<code>Project</code>本身</li>
<li><code>name</code>：<code>Project</code>名字</li>
<li><code>path</code>：<code>Project</code>的绝对路径</li>
<li><code>description</code>：<code>Project</code>的描述信息，<code>Task</code>的描述信息</li>
<li><code>buildDir</code>：<code>Project</code>构建结果存放目录</li>
<li><code>version</code>：<code>Project</code>版本号</li>
</ol>
</blockquote>
<h3 id="自定义Property"><a href="#自定义Property" class="headerlink" title="自定义Property"></a>自定义Property</h3><h4 id="gradle文件中定义"><a href="#gradle文件中定义" class="headerlink" title="gradle文件中定义"></a>gradle文件中定义</h4><blockquote>
<p>build.gradle中向Project添加额外的Property时，需要通过ext来定义。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ext.propertyA = &apos;this is propertyA&apos;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    propertyB = &apos;this is propertyB&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="命令行参数定义Property"><a href="#命令行参数定义Property" class="headerlink" title="命令行参数定义Property"></a>命令行参数定义Property</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task showCmdProperty &lt;&lt; &#123;</span><br><span class="line">    println testA</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">// -P设置Property，字符串使用双引号否则报错</span><br><span class="line">gradlew -PtestA=&quot;this is testA which is custom property&quot; showCmdProperty</span><br></pre></td></tr></table></figure>
<h4 id="JVM系统参数定义Property"><a href="#JVM系统参数定义Property" class="headerlink" title="JVM系统参数定义Property"></a>JVM系统参数定义Property</h4><blockquote>
<p><code>Java</code>中可以通过<code>-D</code>参数定义<strong>JVM</strong>系统参数，然后在代码中通过<strong>System.getProperty()</strong>获取系统参数。<code>Gradle</code>中可以通过加上<strong>-Dorg.gradle.project前缀</strong>设置<code>Property</code>。示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task showCmdProperty &lt;&lt; &#123;</span><br><span class="line">    println testB</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">gradlew -Dorg.gradle.project.testB=&quot;this is testB property&quot; showCmdProperty</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="环境变量中定义Property"><a href="#环境变量中定义Property" class="headerlink" title="环境变量中定义Property"></a>环境变量中定义Property</h4><blockquote>
<p>在定义环境变量时，每个Property都需要以<strong>ORG_GRADLE<em>PROJECT</em></strong>为前缀，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">task showCmdProperty &lt;&lt; &#123;</span><br><span class="line">    println testC</span><br><span class="line">&#125;</span><br><span class="line">export ORG_GRADLE_PROJECT_testC=&quot;this is testC property&quot; showCmdProperty</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="扩展-Extension"><a href="#扩展-Extension" class="headerlink" title="扩展(Extension)"></a>扩展(<strong>Extension</strong>)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dateAndTime &#123;// 扩展</span><br><span class="line">    timeFormat = &apos;HH:mm:ss.SSS&apos;</span><br><span class="line">    dateFormat = &apos;MM/dd/yyyy&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插件-Plugin"><a href="#插件-Plugin" class="headerlink" title="插件(Plugin)"></a>插件(<strong>Plugin</strong>)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class DateAndTimePlugin implements Plugin&lt;Project&gt; &#123;</span><br><span class="line">    void apply(Project project) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类-Class"><a href="#类-Class" class="headerlink" title="类(Class)"></a>类(<strong>Class</strong>)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class DateAndTimePluginExtension &#123;</span><br><span class="line">    String timeFormat = &apos;MM/dd/yyyHH:mm:ss.SSS&apos;</span><br><span class="line">    String dateFormat = &apos;yyyy-MM-dd&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="委托-Delegate-机制"><a href="#委托-Delegate-机制" class="headerlink" title="委托(Delegate)机制"></a>委托(<strong>Delegate</strong>)机制</h3><blockquote>
<p><code>Groovy Bean</code>对象直接访问属性的时候，<code>Groovy</code>会<strong>隐式</strong>动态地为属性创建<strong>getter</strong>和<strong>setter</strong>方法，示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Dog &#123;</span><br><span class="line">    private String name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Animal &#123;</span><br><span class="line">    Dog dog = new Dog()</span><br><span class="line"></span><br><span class="line">    void config(Closure closure) &#123;</span><br><span class="line">        closure.delegate = dog// 委托给dog</span><br><span class="line">        closure.setResolveStrategy Closure.DELEGATE_FIRST// 设置delegate优先，默认owner优先</span><br><span class="line">        closure()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def animal = new Anima()</span><br><span class="line">animal.config &#123;</span><br><span class="line">    name = &quot;Husky&quot;</span><br><span class="line">&#125;</span><br><span class="line">println animal.dog.name</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="常见的使用场景"><a href="#常见的使用场景" class="headerlink" title="常见的使用场景"></a>常见的使用场景</h4><blockquote>
<ol>
<li><code>project.configure()</code>，委托给<code>ConfigurationContainer</code></li>
<li><code>project.configure(Object obj, Closure confClosure)</code>，委托给<code>Object</code></li>
<li><code>project.dependencies()</code>，委托给<code>DependencyHandler</code></li>
</ol>
</blockquote>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>委托机制可以使我们将一个闭包中的执行代码作用对象设置成任意其它对象</p>
</blockquote>
<h2 id="Android-Plugin"><a href="#Android-Plugin" class="headerlink" title="Android Plugin"></a>Android Plugin</h2><h3 id="配置sourceSets"><a href="#配置sourceSets" class="headerlink" title="配置sourceSets"></a>配置sourceSets</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        res.srcDirs = [&apos;src/main/res&apos;, &apos;src/main/res-respkg&apos;]</span><br><span class="line">        jniLibs.srcDirs = [&apos;libs&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建新的SourceSet"><a href="#创建新的SourceSet" class="headerlink" title="创建新的SourceSet"></a>创建新的SourceSet</h3><blockquote>
<p>默认情况下，custom所对应的Android源文件目录被Gradle框架设置为<code>${path-to-project}/src/customSet/java</code>，资源文件目录则会设置为<code>${path-to-project}/src/customSet/resources</code></p>
<p>Gradle自动地为每一个创建的sourceSet创建相应的Task。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    customSet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="依赖自定义SourceSet"><a href="#依赖自定义SourceSet" class="headerlink" title="依赖自定义SourceSet"></a>依赖自定义SourceSet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 1st，main中task先依赖于customSet中的Task</span><br><span class="line">classes.dependsOn customSetClasses</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 2nd，customSet生成的class文件放到main的classpath下</span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        compileClasspath = compileClasspath + files(customSet.output.classesDir)</span><br><span class="line">    &#125;</span><br><span class="line">    test &#123;</span><br><span class="line">        runtimeClasspath = runtimeClasspath + files(customSet.output.classesDir)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置-Configurations"><a href="#配置-Configurations" class="headerlink" title="配置(Configurations)"></a>配置(<strong>Configurations</strong>)</h2><blockquote>
<p>Gradle将依赖分组，编译和运行时使用不同的依赖，每组依赖称为一个Configuration。在声明依赖时，我们实际上是在设置不同的Configuration。</p>
</blockquote>
<h3 id="插件中定义的Configuration"><a href="#插件中定义的Configuration" class="headerlink" title="插件中定义的Configuration"></a>插件中定义的Configuration</h3><blockquote>
<ol>
<li><code>Java Plugin</code>定义了名为<code>compile</code>和<code>testCompile</code>的<code>Configuration</code></li>
<li><code>Android Plugin</code>定义了名为<code>androidTestCompile</code>的<code>Configuration</code>  </li>
</ol>
</blockquote>
<h3 id="自定义Configuration"><a href="#自定义Configuration" class="headerlink" title="自定义Configuration"></a>自定义Configuration</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">    myDepency</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    myDepency &apos;com.squareup.okhttp:okhttp:2.4.0&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task showMyDepency &lt;&lt; &#123;</span><br><span class="line">    configurations.myDepency.asPath</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java源码分析]]></title>
      <url>http://Res2013.github.io/ss/2018/04/12/Java%E5%9F%BA%E7%A1%80/Java%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="查看字节码"><a href="#查看字节码" class="headerlink" title="查看字节码"></a>查看字节码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap Test.class</span><br></pre></td></tr></table></figure>
<h2 id="反编译字节码"><a href="#反编译字节码" class="headerlink" title="反编译字节码"></a>反编译字节码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c Test.class</span><br></pre></td></tr></table></figure>
<h2 id="翻译字节码工具"><a href="#翻译字节码工具" class="headerlink" title="翻译字节码工具"></a>翻译字节码工具</h2><blockquote>
<p>下载 <a href="[http://www.javadecompilers.com/jad](http://www.javadecompilers.com/jad">jad</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jad.ext -sjava Test.class</span><br></pre></td></tr></table></figure></p>
<p>jd-gui或idea插件也都可以查看</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CardView常见问题]]></title>
      <url>http://Res2013.github.io/ss/2018/03/29/CardView%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>&emsp;&emsp;1.CardView背景设置使用app:cardBackgroundColor，不支持图片</p>
<p>&emsp;&emsp;2.CardView底部显示不全，阴影效果被切了一部分，是因为缺少margin</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用UI库]]></title>
      <url>http://Res2013.github.io/ss/2017/12/28/%E5%B8%B8%E7%94%A8UI%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="常用UI库"><a href="#常用UI库" class="headerlink" title="常用UI库"></a>常用UI库</h1><blockquote>
<p>&emsp;&emsp;1. 画廊效果<a href="https://github.com/yarolegovich/DiscreteScrollView" target="_blank" rel="external">DiscreteScrollView</a></p>
<p>&emsp;&emsp;2. 广告轮播指示器<a href="https://github.com/youth5201314/banner" target="_blank" rel="external">banner</a></p>
<p>&emsp;&emsp;3. <a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="external">BRVAH</a></p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>&emsp;&emsp;4. <a href="https://github.com/alibaba/vlayout" target="_blank" rel="external">VLayout</a></p>
<p>&emsp;&emsp;5. 下拉刷新框架<a href="https://github.com/scwang90/SmartRefreshLayout" target="_blank" rel="external">SmartRefreshLayout</a></p>
<p>&emsp;&emsp;6. <a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">AndroidSwipeLayout</a></p>
<p>&emsp;&emsp;7. <a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">AndroidViewAnimations</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[发布带source和javadoc的aar包]]></title>
      <url>http://Res2013.github.io/ss/2017/09/01/Gradle%E7%B3%BB%E5%88%97/%E5%8F%91%E5%B8%83%E5%B8%A6source%E5%92%8Cjavadoc%E7%9A%84aar%E5%8C%85/</url>
      <content type="html"><![CDATA[<h2 id="上传Library"><a href="#上传Library" class="headerlink" title="上传Library"></a>上传Library</h2><h3 id="修改Module-level的build-gradle"><a href="#修改Module-level的build-gradle" class="headerlink" title="修改Module level的build.gradle"></a>修改Module level的build.gradle</h3><a id="more"></a>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">apply plugin: <span class="string">'maven'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> androidJavadocs(type: Javadoc) &#123;</span><br><span class="line">    <span class="keyword">source</span> = android.<span class="keyword">sourceSets</span>.main.java.srcDirs</span><br><span class="line">    <span class="keyword">classpath</span> += <span class="keyword">project</span>.files(android.getBootClasspath().<span class="keyword">join</span>(<span class="keyword">File</span>.pathSeparator))</span><br><span class="line">    <span class="keyword">destinationDir</span> = <span class="keyword">file</span>(<span class="string">"../javadoc/"</span>)</span><br><span class="line">    failOnError <span class="keyword">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> androidSourcesJar(type: Jar) &#123;</span><br><span class="line">    classifier = <span class="string">'sources'</span></span><br><span class="line">    <span class="keyword">from</span> android.<span class="keyword">sourceSets</span>.main.java.srcDirs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> androidJavadocJar(type: Jar) &#123;</span><br><span class="line">    classifier = <span class="string">'javadoc'</span></span><br><span class="line">    <span class="keyword">from</span> androidJavadocs.<span class="keyword">destinationDir</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            snapshotRepository(url: <span class="string">'http://192.168.x.x:port/nexus/content/repositories/snapshots'</span>) &#123;</span><br><span class="line">                authentication(userName: <span class="string">'username'</span>, password: <span class="string">'pwd'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            repository(url: <span class="string">'http://192.168.x.x:port/nexus/content/repositories/releases'</span>) &#123;</span><br><span class="line">                authentication(userName: <span class="string">'username'</span>, password: <span class="string">'pwd'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            pom.<span class="keyword">project</span> &#123;</span><br><span class="line">                version <span class="string">'1.0.0-SNAPSHOT'</span><span class="comment">//debug版本号  releases版本去掉SNAPSHOT即可</span></span><br><span class="line">                artifactId <span class="string">'xxx'</span></span><br><span class="line">                groupId <span class="string">'xxx.xxx.xxx'</span></span><br><span class="line">                packaging <span class="string">'aar'</span></span><br><span class="line">                <span class="keyword">description</span> <span class="string">'xxx'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">artifacts</span> &#123;</span><br><span class="line">    archives androidSourcesJar</span><br><span class="line">    archives androidJavadocJar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="执行上传脚本"><a href="#执行上传脚本" class="headerlink" title="执行上传脚本"></a>执行上传脚本</h3><blockquote>
<p>点击右侧菜单<strong>Gradle</strong>，找到需要上传的<code>Module</code>，继续寻找<code>upload</code>，然后双击里面的<code>uploadArchives</code>，成功即可。</p>
</blockquote>
<h2 id="使用library"><a href="#使用library" class="headerlink" title="使用library"></a>使用library</h2><h3 id="修改Project-level的build-gradle"><a href="#修改Project-level的build-gradle" class="headerlink" title="修改Project level的build.gradle"></a>修改Project level的build.gradle</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">  jcenter()</span><br><span class="line">  mavenCentral()</span><br><span class="line">  maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</span><br><span class="line">  maven &#123; url <span class="string">'http://192.168.x.x:port/nexus/content/repositories/snapshots'</span> &#125;</span><br><span class="line">  maven &#123; url <span class="string">'http://192.168.x.x:port/nexus/content/repositories/releases'</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="修改Module-level的build-gradle-1"><a href="#修改Module-level的build-gradle-1" class="headerlink" title="修改Module level的build.gradle"></a>修改Module level的build.gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">configurations.all &#123;// 强制更新快照，防止出现代码已上传本地不更新</span><br><span class="line">    resolutionStrategy.cacheChangingModulesFor  0,&apos;seconds&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[快速运行Android开源项目的正确方式]]></title>
      <url>http://Res2013.github.io/ss/2016/10/21/%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="传统打开开源项目方式"><a href="#传统打开开源项目方式" class="headerlink" title="传统打开开源项目方式"></a>传统打开开源项目方式</h2><blockquote>
<p>1.下载源码<br>2.打开Android Studio<br>3.导入项目<br>4.Sync gradle<br>5.运行项目<br>&emsp;&emsp;因为<code>Android Studio</code>很吃内存,启动需要费不少时间,且编译、运行更卡。如果我们仅仅是想得到apk看下效果而运行<code>Android Studio</code>那就太麻烦了,要是同时看多个项目要么就一个个工程切换,要么同时打开多个<code>Android Studio</code>窗口那更是卡的飞起啊。那有没有更好的方式呢,答案肯定是有的,请往下看!</p>
</blockquote>
<a id="more"></a>
<h2 id="快速的打开方式"><a href="#快速的打开方式" class="headerlink" title="快速的打开方式"></a>快速的打开方式</h2><blockquote>
<p>&emsp;&emsp;下载<code>Android Studio</code>源码,利用<code>Android Studio</code>项目中内置的<code>gradle wrapper</code>来进行编译、打包、运行工程,大概流程如下:<br><code>Windows</code>系统采用如下方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd projectDir // cd到工程的根目录下</span><br><span class="line">gradlew clean // 移除所有的编译输出文件,如apk</span><br><span class="line">gradlew build // 生成apk并执行lint检测编译</span><br></pre></td></tr></table></figure></p>
<p>如果想编译、打包、安装一步操作完成,可以这么做:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd projectDir</span><br><span class="line">gradlew clean</span><br><span class="line">gradlew installDebug // 安装debug版apk</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="更快速的运行Github上源码的方式"><a href="#更快速的运行Github上源码的方式" class="headerlink" title="更快速的运行Github上源码的方式"></a>更快速的运行Github上源码的方式</h2><blockquote>
<p>你只需要安装这么一个工具,就可以一”键”下载、编译、打包、运行。该工具地址为:<br><a href="https://github.com/cesarferreira/dryrun" target="_blank" rel="external">https://github.com/cesarferreira/dryrun</a><br>安装该工具之后只需要执行一句命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dryrun https://github.com/cesarferreira/android-helloworld</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>tips: <code>dryrun</code>是一个<code>gem</code>,它是基于<code>ruby</code>的,如果对于<code>ruby</code>不是很了解,安装起来比较耗时虽然高版本<code>ruby</code>已经内置了<code>gem</code></p>
<h2 id="Gradle包下载失败解决方法"><a href="#Gradle包下载失败解决方法" class="headerlink" title="Gradle包下载失败解决方法"></a>Gradle包下载失败解决方法</h2><blockquote>
<p>如果不翻墙直接下载<code>gradle</code>包很大可能会失败,那么此时把下载链接复制到迅雷里下载,下载完成后把该<code>zip</code>文件复制到<code>C:\Users\Administrator\.gradle\wrapper\dists\gradle-2.14.1-all\8bnwg5hd3w55iofp58khbp6yv</code>文件夹里(文件夹名字和UUID有关,这里视具体情况做相应修改)。</p>
</blockquote>
<h2 id="Gradle-Build下载依赖jar包失败解决方法"><a href="#Gradle-Build下载依赖jar包失败解决方法" class="headerlink" title="Gradle Build下载依赖jar包失败解决方法"></a>Gradle Build下载依赖jar包失败解决方法</h2><blockquote>
<p>&emsp;&emsp;Windows系统下gradle默认的依赖存放地址为:<br><code>C:\Users\Administrator\.gradle\caches\modules-2\files-2.1</code>,那么你还是将该<code>jar</code>包下载地址复制到迅雷里,下载完成后在依赖存放目录下找到对应的包名目录(下载地址里包含了包名),然后拷贝进去,此时记得删除该包下文件否则会因为文件被锁<code>build</code>失败。</p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote>
<p>1.在利用<code>gradlew</code>运行<code>Android</code>项目之前需要检查<code>gradle</code>,<code>buildTools</code>,<code>comileSdk</code>版本是否与本地一致,如果不一致则报错。<br>2.<code>Ndk</code>工程注意修改<code>local.properties</code>文件中<code>sdk</code>和<code>ndk</code>的路径,以及删除工程中<code>.externalNativeBuild</code>文件夹中<code>cmake</code>文件夹(这里是按照官网最新的CMake方式,而非ndk-build方式)。</p>
</blockquote>
<p>作者 <a href="https://www.github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 10月 21日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxAndroid入门]]></title>
      <url>http://Res2013.github.io/ss/2016/05/26/RxAndroid%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="什么是RxAndroid？"><a href="#什么是RxAndroid？" class="headerlink" title="什么是RxAndroid？"></a>什么是RxAndroid？</h2><blockquote>
<p>&emsp;&emsp;<code>RxAndroid</code>是基于响应式扩展框架<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a>的<code>Android</code>实现。</p>
</blockquote>
<h2 id="RxAndroid的优点？"><a href="#RxAndroid的优点？" class="headerlink" title="RxAndroid的优点？"></a>RxAndroid的优点？</h2><blockquote>
<p>&emsp;&emsp;<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a>将大量的类绑定到<code>RxJava</code>，使得在<code>Android</code>应用中编写响应式组件变得非常直观、简单。并且它可以优雅地处理异步请求，配合上<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda表达式</a>尤其是当中的<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="external">方法引用</a>，可以大大简化回调函数的处理，提高编码效率。</p>
</blockquote>
<a id="more"></a>
<h2 id="如何在Android-Studio中使用？"><a href="#如何在Android-Studio中使用？" class="headerlink" title="如何在Android Studio中使用？"></a>如何在Android Studio中使用？</h2><h3 id="在build-gradle中配置"><a href="#在build-gradle中配置" class="headerlink" title="在build.gradle中配置"></a>在build.gradle中配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.jakewharton:butterknife:7.0.1&apos; // ButterKnife注解库</span><br><span class="line">    compile &apos;io.reactivex:rxandroid:1.2.0&apos; // RxAndroid</span><br><span class="line">    compile &apos;io.reactivex:rxjava:1.1.5&apos; // RxJava</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在代码中使用"><a href="#在代码中使用" class="headerlink" title="在代码中使用"></a>在代码中使用</h3><h4 id="创建一个观察者对象发出数据"><a href="#创建一个观察者对象发出数据" class="headerlink" title="创建一个观察者对象发出数据"></a>创建一个观察者对象发出数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 这里指定了订阅者订阅的事件</span><br><span class="line">* 如果没有一个订阅者,则观察者不发送任何事件</span><br><span class="line">*/</span></span><br><span class="line">Observable&lt;String&gt; mObservable = Observable.create(  </span><br><span class="line">    <span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; sub)</span> </span>&#123;  </span><br><span class="line">            sub.onNext(<span class="string">"Hello World!"</span>);<span class="comment">// 发送事件  </span></span><br><span class="line">            sub.onCompleted();<span class="comment">// 完成事件  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h4 id="指定一个线程来传递数据"><a href="#指定一个线程来传递数据" class="headerlink" title="指定一个线程来传递数据"></a>指定一个线程来传递数据</h4><blockquote>
<p>&emsp;&emsp;观察者<code>Observable</code>发送数据给主线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mObservable.observeOn(AndroidSchedulers.mainThread());</span><br></pre></td></tr></table></figure>
<h4 id="观察者分发订阅的事件"><a href="#观察者分发订阅的事件" class="headerlink" title="观察者分发订阅的事件"></a>观察者分发订阅的事件</h4><blockquote>
<p>&emsp;&emsp;主线程把数据传递给订阅者<code>Subscriber</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mObservable.subscribe(mSubscriber1);</span><br><span class="line">mobservable.subscribe(mSubscriber2);</span><br></pre></td></tr></table></figure>
<h4 id="创建若干个订阅者处理数据"><a href="#创建若干个订阅者处理数据" class="headerlink" title="创建若干个订阅者处理数据"></a>创建若干个订阅者处理数据</h4><blockquote>
<p>&emsp;&emsp;订阅者最终处理数据。上面例子是主线程传递数据的，所以这里传递和接收的方式是同步的。其它很多时候传递、接收方式可以是异步的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Subscriber&lt;String&gt; mSubscriber1 = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123; mTvText.setText(s); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Subscriber&lt;String&gt; mSubscriber2 = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, s,</span><br><span class="line">            Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="使用Lambda表达式重构代码"><a href="#使用Lambda表达式重构代码" class="headerlink" title="使用Lambda表达式重构代码"></a>使用Lambda表达式重构代码</h3><h4 id="在build-gradle中配置-1"><a href="#在build-gradle中配置-1" class="headerlink" title="在build.gradle中配置"></a>在build.gradle中配置</h4><blockquote>
<p>&emsp;&emsp;<code>Gradle 2.1</code>以上且安装<code>JDK8</code>才可以如此使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &quot;me.tatarka.retrolambda&quot; version &quot;3.2.4&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="开始重构代码"><a href="#开始重构代码" class="headerlink" title="开始重构代码"></a>开始重构代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bind</span>(R.id.tv_text) TextView mTvText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">        * 当方法参数和返回值与Lambda表达式相同时，可以使用</span><br><span class="line">        * 方法名代替，这种就是更为简单的方法引用(References)</span><br><span class="line">        */</span></span><br><span class="line">        <span class="comment">// 创建观察者</span></span><br><span class="line">        Observable&lt;String&gt; observable =</span><br><span class="line">            Observable.create(<span class="keyword">this</span>::handOutEvent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分发订阅事件</span></span><br><span class="line">        observable.observeOn(AndroidSchedulers.mainThread());</span><br><span class="line">        observable.subscribe(mTvText::setText);</span><br><span class="line">        observable.subscribe(<span class="keyword">this</span>::showToast);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handOutEvent</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello World!"</span>); <span class="comment">// 发送事件</span></span><br><span class="line">        subscriber.onCompleted(); <span class="comment">// 完成事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示Toast</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, s,</span><br><span class="line">            Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作者 <a href="https://www.github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 05月 26日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse下Android JNI开发方式之一]]></title>
      <url>http://Res2013.github.io/ss/2016/05/17/NDK%E5%BC%80%E5%8F%91/Eclipse%E4%B8%8BAndroid-JNI%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E4%B9%8B%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="Eclipse下Android-JNI开发方式之一"><a href="#Eclipse下Android-JNI开发方式之一" class="headerlink" title="Eclipse下Android JNI开发方式之一"></a>Eclipse下Android JNI开发方式之一</h1><h2 id="创建一个Android工程"><a href="#创建一个Android工程" class="headerlink" title="创建一个Android工程"></a>创建一个Android工程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jnitest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> TextView mTextView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mTextView = (TextView) findViewById(R.id.tv_main);</span><br><span class="line">        JNITest jni = <span class="keyword">new</span> JNITest();</span><br><span class="line">        String str = jni.getJNIString();</span><br><span class="line">        mTextView.setText(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设计一个JNI接口"><a href="#设计一个JNI接口" class="headerlink" title="设计一个JNI接口"></a>设计一个JNI接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jnitest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNITest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getJNIString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="编译JNI生成头文件"><a href="#编译JNI生成头文件" class="headerlink" title="编译JNI生成头文件"></a>编译JNI生成头文件</h2><blockquote>
<p>&emsp;在终端中<code>cd</code>到该工程的<code>JNITest</code>类所在目录下，输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ javac TestJNI.java</span><br></pre></td></tr></table></figure></p>
<p>&emsp;这时候会生成一个<code>JNITest.class</code>文件，剪切到<code>/bin/com/example/jnitest目录下</code>，如果该目录不存在则手动创建，然后输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ javah -jni com.example.jnitest.JNITest</span><br></pre></td></tr></table></figure></p>
<p>&emsp;这个时候会生成一个<code>com_exmpale_jnitest_JNITest.h</code>文件，这就是上面的<code>Java</code>接口的<code>C/C++</code>头文件，打开这个文件可以看到<code>Eclipse</code>已经为我们自动完成了接口函数的声明：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class com_example_jnitest_JNITest */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_example_jnitest_JNITest</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_example_jnitest_JNITest</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     com_example_jnitest_JNITest</span><br><span class="line"> * Method:    init</span><br><span class="line"> * Signature: ()Z</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jboolean JNICALL <span class="title">Java_com_example_jnitest_JNITest_init</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     com_example_jnitest_JNITest</span><br><span class="line"> * Method:    getJNIString</span><br><span class="line"> * Signature: ()Ljava/lang/String;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_jnitest_JNITest_getJNIString</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     com_example_jnitest_JNITest</span><br><span class="line"> * Method:    destroy</span><br><span class="line"> * Signature: ()V</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_example_jnitest_JNITest_destroy</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="C-C-实现JNI接口"><a href="#C-C-实现JNI接口" class="headerlink" title="C/C++实现JNI接口"></a>C/C++实现JNI接口</h2><blockquote>
<p>&emsp;上面生成了<code>JNI</code>的<code>C/C++</code>头文件后，就可以在<code>C</code>层实现<code>JNI</code>接口了。在Project下新建一个<code>jni</code>文件夹，然后把生成的头文件拷贝到该文件夹里，并且在该文件夹下新建一个<code>jnitest.c</code>文件和<code>Android.mk</code>文件。</p>
</blockquote>
<p><code>jnitest.c</code>文件如下图：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"com_example_jnitest_JNITest.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_jnitest_JNITest_getJNIString</span><span class="params">(</span><br><span class="line">		JNIEnv *env, jobject obj)</span> </span>&#123;</span><br><span class="line">	return (*env) -&gt; NewStringUTF(env,<span class="string">"Res2013"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Android.mk</code>文件如下图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := jnitest</span><br><span class="line">LOCAL_SRC_FILES := jniTest.c</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure></p>
<h2 id="编译生成-so文件"><a href="#编译生成-so文件" class="headerlink" title="编译生成.so文件"></a>编译生成.so文件</h2><blockquote>
<p>&emsp;在终端进入该项目的<code>jni</code>目录下，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ndk-build</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>那么生成的<code>jnitest.so</code>文件会自动添加到<code>libs/armeabi</code>目录下</p>
<h2 id="最后直接运行android程序就OK了"><a href="#最后直接运行android程序就OK了" class="headerlink" title="最后直接运行android程序就OK了"></a>最后直接运行android程序就OK了</h2><p>作者 <a href="https://www.github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 05月 17日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符编码浅谈]]></title>
      <url>http://Res2013.github.io/ss/2016/05/16/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%B5%85%E8%B0%88/</url>
      <content type="html"><![CDATA[<h2 id="为什么有字符编码"><a href="#为什么有字符编码" class="headerlink" title="为什么有字符编码?"></a>为什么有字符编码?</h2><blockquote>
<p>&emsp;&emsp;计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能够处理。最早的时候只有127个大小写英文字母、数字和一些符号被编码到计算机里,称为<code>ASCII</code>编码。</p>
</blockquote>
<h2 id="什么是Unicode编码"><a href="#什么是Unicode编码" class="headerlink" title="什么是Unicode编码?"></a>什么是Unicode编码?</h2><blockquote>
<p>&emsp;&emsp;<code>Unicode</code>编码也叫做统一码、万国码、单一码，是计算机科学领域里的一项业界标准，包括字符集、编码方案等。</p>
</blockquote>
<h2 id="为什么有Unicode编码"><a href="#为什么有Unicode编码" class="headerlink" title="为什么有Unicode编码?"></a>为什么有Unicode编码?</h2><blockquote>
<p>&emsp;&emsp;全世界有几千多种语言，如中文有自己制定的<code>GB2312</code>编码，日文有<code>Shift_JIS</code>编码等等，那么如果在多语言混合的文本中就会出现乱码。那么这个时候<code>Unicode</code>编码应运而生，所有语言都统一使用同一套编码，这样就不会出现乱码问题。</p>
</blockquote>
<a id="more"></a>
<h2 id="为什么有UTF-8编码"><a href="#为什么有UTF-8编码" class="headerlink" title="为什么有UTF-8编码?"></a>为什么有UTF-8编码?</h2><blockquote>
<p>&emsp;&emsp;虽然统一了编码格式，解决了乱码问题，但是新的问题又产生了，是什么呢?<br><code>ASCII</code>编码是1个字节，Unicode编码通常是2个字节，如下图所示:</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:right">ASCII</th>
<th style="text-align:right">Unicode</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td style="text-align:right">01000001</td>
<td style="text-align:right">00000000 01000001</td>
</tr>
<tr>
<td>‘0’</td>
<td style="text-align:right">00110000</td>
<td style="text-align:right">00000000 00110000</td>
</tr>
</tbody>
</table>
<p>那么如果你所写的文本基本上是类似字符<code>A</code>和字符<code>0</code>这样的数据的话，使用<code>Unicode</code>编码就会比<code>ASCII</code>编码多出一倍的存储空间，在存储和传输上就会非常不划算。所以，此时”可变长编码”的<code>UTF-8</code>编码应运而生。</p>
<h2 id="通用字符编码工作方式"><a href="#通用字符编码工作方式" class="headerlink" title="通用字符编码工作方式"></a>通用字符编码工作方式</h2><blockquote>
<p>&emsp;&emsp;在计算机内存中，都统一使用<code>Unicode</code>编码。当你需要保存数据到计算机硬盘或者需要通过网络传输数据的时候，就可以转换成<code>UTF-8</code>编码；当你需要用编辑器编辑的时候，就可以把<code>UTF-8</code>编码的字符转成<code>Unicode</code>字符存到内存中。</p>
</blockquote>
<h2 id="运用环境"><a href="#运用环境" class="headerlink" title="运用环境"></a>运用环境</h2><blockquote>
<p>&emsp;&emsp;例如:一般网页编程的时候会在<code>JSP</code>页面添加：<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;因为Servlet规范默认是使用ISO-8559-1编码，所以也需要设置编码格式，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">...</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure></p>
<p>值得注意的是:当你设置响应的编码格式是<code>utf-8</code>，在<code>TCP/IP Monitor</code>截获到的数据显示可能会乱码，为什么呢？这是因为一般本地<code>MyEclipse</code>默认编码、解码格式是<code>gbk</code>，当流向<code>MyEclipse</code>界面输出的数据编码格式是<code>utf-8</code>，那么解码后的数据就会出现乱码。<br>&emsp;&emsp;一般的Java程序，文件流的默认编码格式是在<code>JVM</code>刚启动的时候从本机系统配置文件读取的，这点也要记住！</p>
<p>&emsp;&emsp;临时想到一点: 本文网址是<code>http://res2013.github.io/2016/05/16/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%B5%85%E8%B0%88/</code>，那么后面的这个字符串<code>%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%B5%85%E8%B0%88</code>是相关的API用<code>%</code>符号把十六进制数隔开了，去掉<code>%</code>符号，每三个十六进制数对应三个字节，也就是对应一个汉字，刚好十八个十六进制数，对应十八个字节即是六个汉字，也就是这篇文章的题目”字符编码浅谈”,这里用到的就是<code>utf-8</code>编码(utf-8编码中，汉字通常是3个字节，只有生僻的字符是4-6个字节)。</p>
</blockquote>
<p>作者 <a href="https://www.github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 05月 16日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[像玉的石头]]></title>
      <url>http://Res2013.github.io/ss/2016/05/15/%E5%83%8F%E7%8E%89%E7%9A%84%E7%9F%B3%E5%A4%B4/</url>
      <content type="html"><![CDATA[<p>你说相遇是休止符的前奏<br>你说结局是道不尽的悔疚<br>你说黑夜让人失声无法嘶吼<br>你说孤独让人沉溺忘了求救<br>我心弦易动音纷纷<br>后来都化成世间赞美的裂纹<br>直到恐惧布满诱人的全身<br>像玉的石头坚硬是不破碎的借口<br>美丽是赶不走的忧愁<br><a id="more"></a><br>你的笑是教人贪杯的毒酒<br>醉生梦死不过似是而非的出走<br>歇斯底里亦无人感同身受<br>粉身碎骨也许才最享受</p>
<p>你说掌纹是解不开的魔咒<br>你说命运是没名字的情仇<br>你说拥抱让人温暖不敢奢求<br>你说疼痛让人麻木丢掉温柔<br>我心弦易动音纷纷<br>后来都化成世间赞美的裂纹<br>直到恐惧布满诱人的全身<br>像玉的石头<br>坚硬是不破碎的借口<br>美丽是赶不走的忧愁<br>你的笑是教人贪杯的毒酒<br>醉生梦死不过似是而非的出走<br>歇斯底里亦无人感同身受<br>粉身碎骨也许才最享受</p>
<p>像玉的石头<br>愿你远离恶言相向<br>愿你找回孤独一掷的疯狂<br>像玉的石头<br>愿你真实一如往常<br>愿你走在只属于你的路上<br>像玉的石头<br>愿你不再那么匆忙<br>愿你能有值得停留的家乡 </p>
<p>作者:不详</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建静态博客并部署到GitHub]]></title>
      <url>http://Res2013.github.io/ss/2016/05/14/GitHub%E4%B8%8A%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这篇文章主要是记录利用Hexo搭建静态博客并部署到GitHub.</p>
</blockquote>
<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p><strong>hexo</strong> 是一个基于<code>Node.js</code>的静态博客程序，代码托管在<a href="http://www.github.com" target="_blank" rel="external">GitHub</a>上。</p>
<h3 id="为什么用Hexo"><a href="#为什么用Hexo" class="headerlink" title="为什么用Hexo"></a>为什么用Hexo</h3><p><code>Hexo</code>简单优雅，而且风格多变，适合搭建个人博客，且支持多平台</p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装msysgit和node-js"><a href="#安装msysgit和node-js" class="headerlink" title="安装msysgit和node.js"></a>安装<a href="https://git-for-windows.github.io/" target="_blank" rel="external">msysgit</a>和<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></h3><p>利用<code>node.js</code>里自带的<code>npm</code>安装<code>hexo</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;blogfolder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;blogfolder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<h3 id="安装所依赖的插件"><a href="#安装所依赖的插件" class="headerlink" title="安装所依赖的插件"></a>安装所依赖的插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;blogfolder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>我目前用的是比较火的Next主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
<p>下载的主题放到<code>blogfolder</code>里的<code>thems/next</code>目录下</p>
<h3 id="配置站点的-config-yml文件"><a href="#配置站点的-config-yml文件" class="headerlink" title="配置站点的_config.yml文件"></a>配置站点的_config.yml文件</h3><p>复制过来的主题在<code>_config.yml</code>中配置,如:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: theme-name</span><br></pre></td></tr></table></figure>
<p>更多配置信息参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a>和<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">NexT主题配置文档</a></p>
<p>更多文章排版信息请访问<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">@Cmd Markdown编辑阅读器</a></p>
<h3 id="本地测试博客"><a href="#本地测试博客" class="headerlink" title="本地测试博客"></a>本地测试博客</h3><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generator// 可简写`hexo g`</span><br><span class="line">$ hexo server// 调试模式可以加上`--debug`,也可简写为`hexo s`</span><br></pre></td></tr></table></figure>
<p>通过<code>localhost:4000</code>本地访问博客站点</p>
<h3 id="部署博客到Github上"><a href="#部署博客到Github上" class="headerlink" title="部署博客到Github上"></a>部署博客到Github上</h3><blockquote>
<ul>
<li><p>前提条件是GitHub上已添加<code>SSH Key</code><a href="https://help.github.com/articles/checking-for-existing-ssh-keys/" target="_blank" rel="external">GitHub SSH Keys Guide</a></p>
</li>
<li><p>GitHub上新建一个项目,项目名必须为:<code>username.github.io</code></p>
</li>
</ul>
</blockquote>
<h4 id="配置站点的-config-yml文件-1"><a href="#配置站点的-config-yml文件-1" class="headerlink" title="配置站点的_config.yml文件"></a>配置站点的<code>_config.yml</code>文件</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="code">	type: git// Hexo更新到3.0以后type由github改成了git</span></span><br><span class="line"><span class="code">	repository: git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="code">	branch: master</span></span><br></pre></td></tr></table></figure>
<h4 id="部署到username-github-io项目上"><a href="#部署到username-github-io项目上" class="headerlink" title="部署到username.github.io项目上"></a>部署到<code>username.github.io</code>项目上</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy// 可简写为`hexo d`</span><br></pre></td></tr></table></figure>
<p>作者 <a href="https://github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 05月 14日</p>
]]></content>
    </entry>
    
  
  
</search>
