<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[C结构体对齐规则]]></title>
      <url>http://Res2013.github.io/ss/2018/06/08/C++/C%E7%BB%93%E6%9E%84%E4%BD%93%E5%AF%B9%E9%BD%90%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>&emsp;&emsp;1. <strong>offsetof</strong>，用于求结构体中一个成员在该结构体中的偏移量</p>
<p>&emsp;&emsp;2. <strong>alignof</strong>，用于求一个类型的对齐值</p>
<p>&emsp;&emsp;3. <strong>sizeof</strong>，用于求一个变量或类型的大小</p>
<p>&emsp;&emsp;4. 对于<strong>所有基本类型</strong>，<strong>alignof(T) == sizeof(T)</strong></p>
</blockquote>
<h2 id="结构体对齐规则"><a href="#结构体对齐规则" class="headerlink" title="结构体对齐规则"></a>结构体对齐规则</h2><blockquote>
<p>&emsp;&emsp;1. 结构体变量中<strong>成员的偏移量</strong>必须是该<strong>成员类型对齐值</strong>的<strong>整数倍</strong>。否则，它与前一个成员变量之间要<strong>填充(padding)</strong>一些无意义的字节来满足<br>&emsp;&emsp;2. 结构体大小必须是其中<strong>所有成员类型</strong>中<strong>对齐值最大者</strong>的整数倍。否则，在最后一个成员后面<strong>填充(padding)</strong></p>
</blockquote>
<a id="more"></a>
<p>举例说明：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">char</span> a;<span class="comment">// align : 1, sizeof : 1, offset : 0bytes</span></span><br><span class="line">  <span class="keyword">char</span> padding1[<span class="number">3</span>];<span class="comment">// 3bytes</span></span><br><span class="line">	<span class="keyword">float</span> b;<span class="comment">// align : 4, sizeof : 4, offset : 4bytes</span></span><br><span class="line">	<span class="keyword">int</span> c;<span class="comment">// align : 4, sizeof : 4, offset : 8bytes</span></span><br><span class="line">  <span class="keyword">char</span> padding2[<span class="number">4</span>];<span class="comment">// 4bytes</span></span><br><span class="line">	<span class="keyword">double</span> d;<span class="comment">// align : 8, sizeof : 8, offset : 16bytes</span></span><br><span class="line">	<span class="keyword">unsigned</span> e;<span class="comment">// align : 4, sizeof : 4, offset : 24bytes</span></span><br><span class="line">  <span class="keyword">char</span> padding3[<span class="number">4</span>];<span class="comment">// 4bytes</span></span><br><span class="line">&#125; T;<span class="comment">// align : 8, sizeof : 32bytes</span></span><br></pre></td></tr></table></figure></p>
<p>解释如下：</p>
<blockquote>
<p>&emsp;&emsp;由<strong>第1条规则</strong>可知：成员<code>a</code>和<code>b</code>之间需要<code>padding</code>3个字节，成员<code>c</code>和<code>d</code>之间需要<code>padding</code>4个字节</p>
<p>&emsp;&emsp;由<strong>第2条规则</strong>可知：成员<code>e</code>后面需要<code>padding</code>4个字节</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Proxy&Hook]]></title>
      <url>http://Res2013.github.io/ss/2018/06/08/Java%E5%9F%BA%E7%A1%80/Proxy&Hook/</url>
      <content type="html"><![CDATA[<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><blockquote>
<p>使用组合模式(<strong>has</strong>关系)</p>
</blockquote>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="接口动态代理"><a href="#接口动态代理" class="headerlink" title="接口动态代理"></a>接口动态代理</h4><blockquote>
<p>&emsp;&emsp;使用Proxy类和InvocationHandler接口</p>
</blockquote>
<h4 id="类动态代理"><a href="#类动态代理" class="headerlink" title="类动态代理"></a>类动态代理</h4><blockquote>
<p>&emsp;&emsp;使用cglib库</p>
</blockquote>
<h2 id="输出Proxy类"><a href="#输出Proxy类" class="headerlink" title="输出Proxy类"></a>输出Proxy类</h2><blockquote>
<p>&emsp;&emsp;Java中可以通过-D参数定义JVM系统参数，然后在代码中通过System.getProperty()获取系统参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JVM生成Proxy字节码文件，保存路径为：com/sun/proxy</span></span><br><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<h2 id="查看代理类实现"><a href="#查看代理类实现" class="headerlink" title="查看代理类实现"></a>查看代理类实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jad.exe -sjava com/sun/proxy/$Proxy0.class</span><br></pre></td></tr></table></figure>
<blockquote>
<p>&emsp;&emsp;jd-gui或idea插件也都可以查看，即可知道代理对象的代理是InvocationHandler实现类对象，而该对象的代理又是实际真正执行方法的对象。</p>
<p>&emsp;&emsp;核心代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IProxyInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// h: InvocationHandler, m3: sayHelloMethod, var1: nameStr</span></span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">"herry.proxy.IProxyInterface"</span>).getMethod(<span class="string">"sayHello"</span>, Class.forName(<span class="string">"java.lang.String"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代理作用"><a href="#代理作用" class="headerlink" title="代理作用"></a>代理作用</h2><blockquote>
<p>&emsp;&emsp;代理机制进行API Hook进而达到方法增强(也可以方法拦截)是框架的常用手段，比如J2EE框架Spring通过动态代理优雅地实现了AOP编程，极大地提升了Web开发效率；Android网络框架Retrofit通过动态代理提升了网络请求的开发效率。</p>
</blockquote>
<h3 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h3><p>&emsp;&emsp;代理可以实现方法增强，比如常用的日志、方法耗时、缓存等。通过代理方法修改原方法的参数和返回值，就是代理Hook。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>&emsp;&emsp;被Hook的对象叫做<strong>Hook点</strong></p>
</blockquote>
<h3 id="易Hook的对象"><a href="#易Hook的对象" class="headerlink" title="易Hook的对象"></a>易Hook的对象</h3><blockquote>
<p>&emsp;&emsp;易找到、不易改变的对象好Hook，尤其是<strong>静态变量和单例</strong>。在一个进程中，静态变量和单例变量是相对不容易发生变化的，因此非常容易定位，而普通对象容易改变。</p>
</blockquote>
<h3 id="寻找合适的Hook点"><a href="#寻找合适的Hook点" class="headerlink" title="寻找合适的Hook点"></a>寻找合适的Hook点</h3><blockquote>
<p>&emsp;&emsp;分析<code>startActivity</code>方法的调用链，找出合适的Hook点。如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContextImpl.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</span><br><span class="line">    warnIfCallingFromSystemProcess();</span><br><span class="line">    <span class="keyword">if</span> ((intent.getFlags()&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</span><br><span class="line">                <span class="string">"Calling startActivity() from outside of an Activity "</span></span><br><span class="line">                + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></span><br><span class="line">                + <span class="string">" Is this really what you want?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mMainThread.getInstrumentation().execStartActivity(</span><br><span class="line">        getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>,</span><br><span class="line">        (Activity)<span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;很明显<code>Activity</code>是<code>ActivityThread</code>的<code>mInstrumentation</code>成员执行<code>execStartActivity()</code>启动的，<code>ActivityThread</code>是主线程，而主线程仅有一个，<br>这里是个良好的<code>Hook</code>点。接下来把主线程里的<code>mInstrumentation</code>对象替换成我们修改过的代理对象。<code>ActivityThread</code>类里有个隐藏的静态方法<code>currentActivityThread</code>可以获得主线程引用，刚好可以使用反射很简单地获取到。如下所示：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; activityThreadClass = Class.forName(<span class="string">"android.app.ActivityThread"</span>);</span><br><span class="line">Method currentActivityThreadMethod = activityThreadClass.getDeclaredMethod(<span class="string">"currentActivityThread"</span>);</span><br><span class="line"><span class="comment">// 取消Java语言的安全检查，可以提升反射的速度</span></span><br><span class="line">currentActivityThreadMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object currentActivityThread = currentActivityThreadMethod.invoke(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>&emsp;&emsp;1. 寻找Hook点，原则是静态变量或单例对象，且尽量Hook public修饰的对象和方法，public保证版本的兼容性，一般不需要适配。</p>
<p>&emsp;&emsp;2. 选择合理的代理方式，如果是接口使用动态代理，如果是类可以利用多态并使用静态代理，也可以使用cglib库。</p>
<p>&emsp;&emsp;3. 偷梁换柱—-使用反射将原始对象替换成代理对象。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OkHttp加解密拦截器]]></title>
      <url>http://Res2013.github.io/ss/2018/05/24/Android/OkHttp%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>&emsp;&emsp;加、解密写到同一个拦截器里，如下所示：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Request request = chain.request();</span><br><span class="line">    String url = request.url().toString();</span><br><span class="line">    String method = request.method();</span><br><span class="line">    Log.i(TAG, <span class="string">"url为:"</span> + url + <span class="string">"\nmethod为:"</span> + method);</span><br><span class="line">    request = encrypt(request);</span><br><span class="line">    Response response = chain.proceed(request);</span><br><span class="line">    response = decrypt(response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">encrypt</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RequestBody requestBody = request.body();</span><br><span class="line">    <span class="keyword">if</span> (requestBody != <span class="keyword">null</span>) &#123;</span><br><span class="line">        okio.Buffer buffer = <span class="keyword">new</span> okio.Buffer();</span><br><span class="line">        requestBody.writeTo(buffer);</span><br><span class="line">        Charset charset = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line">        MediaType contentType = requestBody.contentType();</span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            charset = contentType.charset(charset);</span><br><span class="line">        &#125;</span><br><span class="line">        String string = buffer.readString(charset);</span><br><span class="line">        Log.i(TAG, <span class="string">"请求的原数据为:"</span> + string);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> encrypt</span></span><br><span class="line">        String encryptStr = encrypt(string);</span><br><span class="line">        RequestBody body = MultipartBody.create(contentType, encryptStr);</span><br><span class="line">        Request.Builder builder = request</span><br><span class="line">                        .newBuilder()</span><br><span class="line">                        .post(body)</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Response <span class="title">decrypt</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">        <span class="comment">//the response data</span></span><br><span class="line">        ResponseBody body = response.body();</span><br><span class="line">        BufferedSource source = body.source();</span><br><span class="line">        source.request(Long.MAX_VALUE);</span><br><span class="line">        <span class="comment">// Buffer the entire body</span></span><br><span class="line">        Buffer buffer = source.buffer();</span><br><span class="line">        Charset charset = Charset.defaultCharset();</span><br><span class="line">        MediaType contentType = body.contentType();</span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            charset = contentType.charset(charset);</span><br><span class="line">        &#125;</span><br><span class="line">        String decryptStr = buffer.clone().readString(charset);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> decrypt</span></span><br><span class="line">        String string = decrypt(decryptStr);</span><br><span class="line">        Log.i(TAG, <span class="string">"响应的数据解密后为:"</span> + string );</span><br><span class="line">        ResponseBody responseBody = ResponseBody.create(contentType, bodyString);</span><br><span class="line">        response = response.newBuilder().body(responseBody).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[快速运行Android开源项目的正确方式]]></title>
      <url>http://Res2013.github.io/ss/2016/10/21/%E5%BF%AB%E9%80%9F%E8%BF%90%E8%A1%8C%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="传统打开开源项目方式"><a href="#传统打开开源项目方式" class="headerlink" title="传统打开开源项目方式"></a>传统打开开源项目方式</h2><blockquote>
<p>1.下载源码<br>2.打开Android Studio<br>3.导入项目<br>4.Sync gradle<br>5.运行项目<br>&emsp;&emsp;因为<code>Android Studio</code>很吃内存,启动需要费不少时间,且编译、运行更卡。如果我们仅仅是想得到apk看下效果而运行<code>Android Studio</code>那就太麻烦了,要是同时看多个项目要么就一个个工程切换,要么同时打开多个<code>Android Studio</code>窗口那更是卡的飞起啊。那有没有更好的方式呢,答案肯定是有的,请往下看!</p>
</blockquote>
<h2 id="快速的打开方式"><a href="#快速的打开方式" class="headerlink" title="快速的打开方式"></a>快速的打开方式</h2><blockquote>
<p>&emsp;&emsp;下载<code>Android Studio</code>源码,利用<code>Android Studio</code>项目中内置的<code>gradle wrapper</code>来进行编译、打包、运行工程,大概流程如下:<br><code>Windows</code>系统采用如下方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd projectDir // cd到工程的根目录下</span><br><span class="line">gradlew clean // 移除所有的编译输出文件,如apk</span><br><span class="line">gradlew build // 生成apk并执行lint检测编译</span><br></pre></td></tr></table></figure></p>
<p>如果想编译、打包、安装一步操作完成,可以这么做:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd projectDir</span><br><span class="line">gradlew clean</span><br><span class="line">gradlew installDebug // 安装debug版apk</span><br></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<h2 id="更快速的运行Github上源码的方式"><a href="#更快速的运行Github上源码的方式" class="headerlink" title="更快速的运行Github上源码的方式"></a>更快速的运行Github上源码的方式</h2><blockquote>
<p>你只需要安装这么一个工具,就可以一”键”下载、编译、打包、运行。该工具地址为:<br><a href="https://github.com/cesarferreira/dryrun" target="_blank" rel="external">https://github.com/cesarferreira/dryrun</a><br>安装该工具之后只需要执行一句命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dryrun https://github.com/cesarferreira/android-helloworld</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>tips: <code>dryrun</code>是一个<code>gem</code>,它是基于<code>ruby</code>的,如果对于<code>ruby</code>不是很了解,安装起来比较耗时虽然高版本<code>ruby</code>已经内置了<code>gem</code></p>
<h2 id="Gradle包下载失败解决方法"><a href="#Gradle包下载失败解决方法" class="headerlink" title="Gradle包下载失败解决方法"></a>Gradle包下载失败解决方法</h2><blockquote>
<p>如果不翻墙直接下载<code>gradle</code>包很大可能会失败,那么此时把下载链接复制到迅雷里下载,下载完成后把该<code>zip</code>文件复制到<code>C:\Users\Administrator\.gradle\wrapper\dists\gradle-2.14.1-all\8bnwg5hd3w55iofp58khbp6yv</code>文件夹里(文件夹名字和UUID有关,这里视具体情况做相应修改)。</p>
</blockquote>
<h2 id="Gradle-Build下载依赖jar包失败解决方法"><a href="#Gradle-Build下载依赖jar包失败解决方法" class="headerlink" title="Gradle Build下载依赖jar包失败解决方法"></a>Gradle Build下载依赖jar包失败解决方法</h2><blockquote>
<p>&emsp;&emsp;Windows系统下gradle默认的依赖存放地址为:<br><code>C:\Users\Administrator\.gradle\caches\modules-2\files-2.1</code>,那么你还是将该<code>jar</code>包下载地址复制到迅雷里,下载完成后在依赖存放目录下找到对应的包名目录(下载地址里包含了包名),然后拷贝进去,此时记得删除该包下文件否则会因为文件被锁<code>build</code>失败。</p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote>
<p>1.在利用<code>gradlew</code>运行<code>Android</code>项目之前需要检查<code>gradle</code>,<code>buildTools</code>,<code>comileSdk</code>版本是否与本地一致,如果不一致则报错。<br>2.<code>Ndk</code>工程注意修改<code>local.properties</code>文件中<code>sdk</code>和<code>ndk</code>的路径,以及删除工程中<code>.externalNativeBuild</code>文件夹中<code>cmake</code>文件夹(这里是按照官网最新的CMake方式,而非ndk-build方式)。</p>
</blockquote>
<p>作者 <a href="https://www.github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 10月 21日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxAndroid入门]]></title>
      <url>http://Res2013.github.io/ss/2016/05/26/RxAndroid%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="什么是RxAndroid？"><a href="#什么是RxAndroid？" class="headerlink" title="什么是RxAndroid？"></a>什么是RxAndroid？</h2><blockquote>
<p>&emsp;&emsp;<code>RxAndroid</code>是基于响应式扩展框架<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a>的<code>Android</code>实现。</p>
</blockquote>
<h2 id="RxAndroid的优点？"><a href="#RxAndroid的优点？" class="headerlink" title="RxAndroid的优点？"></a>RxAndroid的优点？</h2><blockquote>
<p>&emsp;&emsp;<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">RxAndroid</a>将大量的类绑定到<code>RxJava</code>，使得在<code>Android</code>应用中编写响应式组件变得非常直观、简单。并且它可以优雅地处理异步请求，配合上<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda表达式</a>尤其是当中的<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="external">方法引用</a>，可以大大简化回调函数的处理，提高编码效率。</p>
</blockquote>
<a id="more"></a>
<h2 id="如何在Android-Studio中使用？"><a href="#如何在Android-Studio中使用？" class="headerlink" title="如何在Android Studio中使用？"></a>如何在Android Studio中使用？</h2><h3 id="在build-gradle中配置"><a href="#在build-gradle中配置" class="headerlink" title="在build.gradle中配置"></a>在build.gradle中配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;com.jakewharton:butterknife:7.0.1&apos; // ButterKnife注解库</span><br><span class="line">    compile &apos;io.reactivex:rxandroid:1.2.0&apos; // RxAndroid</span><br><span class="line">    compile &apos;io.reactivex:rxjava:1.1.5&apos; // RxJava</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在代码中使用"><a href="#在代码中使用" class="headerlink" title="在代码中使用"></a>在代码中使用</h3><h4 id="创建一个观察者对象发出数据"><a href="#创建一个观察者对象发出数据" class="headerlink" title="创建一个观察者对象发出数据"></a>创建一个观察者对象发出数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 这里指定了订阅者订阅的事件</span><br><span class="line">* 如果没有一个订阅者,则观察者不发送任何事件</span><br><span class="line">*/</span></span><br><span class="line">Observable&lt;String&gt; mObservable = Observable.create(  </span><br><span class="line">    <span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; sub)</span> </span>&#123;  </span><br><span class="line">            sub.onNext(<span class="string">"Hello World!"</span>);<span class="comment">// 发送事件  </span></span><br><span class="line">            sub.onCompleted();<span class="comment">// 完成事件  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h4 id="指定一个线程来传递数据"><a href="#指定一个线程来传递数据" class="headerlink" title="指定一个线程来传递数据"></a>指定一个线程来传递数据</h4><blockquote>
<p>&emsp;&emsp;观察者<code>Observable</code>发送数据给主线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mObservable.observeOn(AndroidSchedulers.mainThread());</span><br></pre></td></tr></table></figure>
<h4 id="观察者分发订阅的事件"><a href="#观察者分发订阅的事件" class="headerlink" title="观察者分发订阅的事件"></a>观察者分发订阅的事件</h4><blockquote>
<p>&emsp;&emsp;主线程把数据传递给订阅者<code>Subscriber</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mObservable.subscribe(mSubscriber1);</span><br><span class="line">mobservable.subscribe(mSubscriber2);</span><br></pre></td></tr></table></figure>
<h4 id="创建若干个订阅者处理数据"><a href="#创建若干个订阅者处理数据" class="headerlink" title="创建若干个订阅者处理数据"></a>创建若干个订阅者处理数据</h4><blockquote>
<p>&emsp;&emsp;订阅者最终处理数据。上面例子是主线程传递数据的，所以这里传递和接收的方式是同步的。其它很多时候传递、接收方式可以是异步的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Subscriber&lt;String&gt; mSubscriber1 = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123; mTvText.setText(s); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Subscriber&lt;String&gt; mSubscriber2 = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, s,</span><br><span class="line">            Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="使用Lambda表达式重构代码"><a href="#使用Lambda表达式重构代码" class="headerlink" title="使用Lambda表达式重构代码"></a>使用Lambda表达式重构代码</h3><h4 id="在build-gradle中配置-1"><a href="#在build-gradle中配置-1" class="headerlink" title="在build.gradle中配置"></a>在build.gradle中配置</h4><blockquote>
<p>&emsp;&emsp;<code>Gradle 2.1</code>以上且安装<code>JDK8</code>才可以如此使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &quot;me.tatarka.retrolambda&quot; version &quot;3.2.4&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="开始重构代码"><a href="#开始重构代码" class="headerlink" title="开始重构代码"></a>开始重构代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bind</span>(R.id.tv_text) TextView mTvText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">        * 当方法参数和返回值与Lambda表达式相同时，可以使用</span><br><span class="line">        * 方法名代替，这种就是更为简单的方法引用(References)</span><br><span class="line">        */</span></span><br><span class="line">        <span class="comment">// 创建观察者</span></span><br><span class="line">        Observable&lt;String&gt; observable =</span><br><span class="line">            Observable.create(<span class="keyword">this</span>::handOutEvent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分发订阅事件</span></span><br><span class="line">        observable.observeOn(AndroidSchedulers.mainThread());</span><br><span class="line">        observable.subscribe(mTvText::setText);</span><br><span class="line">        observable.subscribe(<span class="keyword">this</span>::showToast);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handOutEvent</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello World!"</span>); <span class="comment">// 发送事件</span></span><br><span class="line">        subscriber.onCompleted(); <span class="comment">// 完成事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示Toast</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, s,</span><br><span class="line">            Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作者 <a href="https://www.github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 05月 26日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse下Android JNI开发方式之一]]></title>
      <url>http://Res2013.github.io/ss/2016/05/17/NDK%E5%BC%80%E5%8F%91/Eclipse%E4%B8%8BAndroid-JNI%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E4%B9%8B%E4%B8%80/</url>
      <content type="html"><![CDATA[<h1 id="Eclipse下Android-JNI开发方式之一"><a href="#Eclipse下Android-JNI开发方式之一" class="headerlink" title="Eclipse下Android JNI开发方式之一"></a>Eclipse下Android JNI开发方式之一</h1><h2 id="创建一个Android工程"><a href="#创建一个Android工程" class="headerlink" title="创建一个Android工程"></a>创建一个Android工程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jnitest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> TextView mTextView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mTextView = (TextView) findViewById(R.id.tv_main);</span><br><span class="line">        JNITest jni = <span class="keyword">new</span> JNITest();</span><br><span class="line">        String str = jni.getJNIString();</span><br><span class="line">        mTextView.setText(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设计一个JNI接口"><a href="#设计一个JNI接口" class="headerlink" title="设计一个JNI接口"></a>设计一个JNI接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jnitest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNITest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getJNIString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="编译JNI生成头文件"><a href="#编译JNI生成头文件" class="headerlink" title="编译JNI生成头文件"></a>编译JNI生成头文件</h2><blockquote>
<p>&emsp;在终端中<code>cd</code>到该工程的<code>JNITest</code>类所在目录下，输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ javac TestJNI.java</span><br></pre></td></tr></table></figure></p>
<p>&emsp;这时候会生成一个<code>JNITest.class</code>文件，剪切到<code>/bin/com/example/jnitest目录下</code>，如果该目录不存在则手动创建，然后输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ javah -jni com.example.jnitest.JNITest</span><br></pre></td></tr></table></figure></p>
<p>&emsp;这个时候会生成一个<code>com_exmpale_jnitest_JNITest.h</code>文件，这就是上面的<code>Java</code>接口的<code>C/C++</code>头文件，打开这个文件可以看到<code>Eclipse</code>已经为我们自动完成了接口函数的声明：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class com_example_jnitest_JNITest */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_example_jnitest_JNITest</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_example_jnitest_JNITest</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     com_example_jnitest_JNITest</span><br><span class="line"> * Method:    init</span><br><span class="line"> * Signature: ()Z</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jboolean JNICALL <span class="title">Java_com_example_jnitest_JNITest_init</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     com_example_jnitest_JNITest</span><br><span class="line"> * Method:    getJNIString</span><br><span class="line"> * Signature: ()Ljava/lang/String;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_jnitest_JNITest_getJNIString</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Class:     com_example_jnitest_JNITest</span><br><span class="line"> * Method:    destroy</span><br><span class="line"> * Signature: ()V</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_example_jnitest_JNITest_destroy</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h2 id="C-C-实现JNI接口"><a href="#C-C-实现JNI接口" class="headerlink" title="C/C++实现JNI接口"></a>C/C++实现JNI接口</h2><blockquote>
<p>&emsp;上面生成了<code>JNI</code>的<code>C/C++</code>头文件后，就可以在<code>C</code>层实现<code>JNI</code>接口了。在Project下新建一个<code>jni</code>文件夹，然后把生成的头文件拷贝到该文件夹里，并且在该文件夹下新建一个<code>jnitest.c</code>文件和<code>Android.mk</code>文件。</p>
</blockquote>
<p><code>jnitest.c</code>文件如下图：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"com_example_jnitest_JNITest.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_jnitest_JNITest_getJNIString</span><span class="params">(</span><br><span class="line">		JNIEnv *env, jobject obj)</span> </span>&#123;</span><br><span class="line">	return (*env) -&gt; NewStringUTF(env,<span class="string">"Res2013"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Android.mk</code>文件如下图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := jnitest</span><br><span class="line">LOCAL_SRC_FILES := jniTest.c</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure></p>
<h2 id="编译生成-so文件"><a href="#编译生成-so文件" class="headerlink" title="编译生成.so文件"></a>编译生成.so文件</h2><blockquote>
<p>&emsp;在终端进入该项目的<code>jni</code>目录下，使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ndk-build</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>那么生成的<code>jnitest.so</code>文件会自动添加到<code>libs/armeabi</code>目录下</p>
<h2 id="最后直接运行android程序就OK了"><a href="#最后直接运行android程序就OK了" class="headerlink" title="最后直接运行android程序就OK了"></a>最后直接运行android程序就OK了</h2><p>作者 <a href="https://www.github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 05月 17日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符编码浅谈]]></title>
      <url>http://Res2013.github.io/ss/2016/05/16/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%B5%85%E8%B0%88/</url>
      <content type="html"><![CDATA[<h2 id="为什么有字符编码"><a href="#为什么有字符编码" class="headerlink" title="为什么有字符编码?"></a>为什么有字符编码?</h2><blockquote>
<p>&emsp;&emsp;计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能够处理。最早的时候只有127个大小写英文字母、数字和一些符号被编码到计算机里,称为<code>ASCII</code>编码。</p>
</blockquote>
<h2 id="什么是Unicode编码"><a href="#什么是Unicode编码" class="headerlink" title="什么是Unicode编码?"></a>什么是Unicode编码?</h2><blockquote>
<p>&emsp;&emsp;<code>Unicode</code>编码也叫做统一码、万国码、单一码，是计算机科学领域里的一项业界标准，包括字符集、编码方案等。</p>
</blockquote>
<h2 id="为什么有Unicode编码"><a href="#为什么有Unicode编码" class="headerlink" title="为什么有Unicode编码?"></a>为什么有Unicode编码?</h2><blockquote>
<p>&emsp;&emsp;全世界有几千多种语言，如中文有自己制定的<code>GB2312</code>编码，日文有<code>Shift_JIS</code>编码等等，那么如果在多语言混合的文本中就会出现乱码。那么这个时候<code>Unicode</code>编码应运而生，所有语言都统一使用同一套编码，这样就不会出现乱码问题。</p>
</blockquote>
<a id="more"></a>
<h2 id="为什么有UTF-8编码"><a href="#为什么有UTF-8编码" class="headerlink" title="为什么有UTF-8编码?"></a>为什么有UTF-8编码?</h2><blockquote>
<p>&emsp;&emsp;虽然统一了编码格式，解决了乱码问题，但是新的问题又产生了，是什么呢?<br><code>ASCII</code>编码是1个字节，Unicode编码通常是2个字节，如下图所示:</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:right">ASCII</th>
<th style="text-align:right">Unicode</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td style="text-align:right">01000001</td>
<td style="text-align:right">00000000 01000001</td>
</tr>
<tr>
<td>‘0’</td>
<td style="text-align:right">00110000</td>
<td style="text-align:right">00000000 00110000</td>
</tr>
</tbody>
</table>
<p>那么如果你所写的文本基本上是类似字符<code>A</code>和字符<code>0</code>这样的数据的话，使用<code>Unicode</code>编码就会比<code>ASCII</code>编码多出一倍的存储空间，在存储和传输上就会非常不划算。所以，此时”可变长编码”的<code>UTF-8</code>编码应运而生。</p>
<h2 id="通用字符编码工作方式"><a href="#通用字符编码工作方式" class="headerlink" title="通用字符编码工作方式"></a>通用字符编码工作方式</h2><blockquote>
<p>&emsp;&emsp;在计算机内存中，都统一使用<code>Unicode</code>编码。当你需要保存数据到计算机硬盘或者需要通过网络传输数据的时候，就可以转换成<code>UTF-8</code>编码；当你需要用编辑器编辑的时候，就可以把<code>UTF-8</code>编码的字符转成<code>Unicode</code>字符存到内存中。</p>
</blockquote>
<h2 id="运用环境"><a href="#运用环境" class="headerlink" title="运用环境"></a>运用环境</h2><blockquote>
<p>&emsp;&emsp;例如:一般网页编程的时候会在<code>JSP</code>页面添加：<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html;charset=utf-8"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;因为Servlet规范默认是使用ISO-8559-1编码，所以也需要设置编码格式，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">...</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br></pre></td></tr></table></figure></p>
<p>值得注意的是:当你设置响应的编码格式是<code>utf-8</code>，在<code>TCP/IP Monitor</code>截获到的数据显示可能会乱码，为什么呢？这是因为一般本地<code>MyEclipse</code>默认编码、解码格式是<code>gbk</code>，当流向<code>MyEclipse</code>界面输出的数据编码格式是<code>utf-8</code>，那么解码后的数据就会出现乱码。<br>&emsp;&emsp;一般的Java程序，文件流的默认编码格式是在<code>JVM</code>刚启动的时候从本机系统配置文件读取的，这点也要记住！</p>
<p>&emsp;&emsp;临时想到一点: 本文网址是<code>http://res2013.github.io/2016/05/16/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%B5%85%E8%B0%88/</code>，那么后面的这个字符串<code>%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%B5%85%E8%B0%88</code>是相关的API用<code>%</code>符号把十六进制数隔开了，去掉<code>%</code>符号，每三个十六进制数对应三个字节，也就是对应一个汉字，刚好十八个十六进制数，对应十八个字节即是六个汉字，也就是这篇文章的题目”字符编码浅谈”,这里用到的就是<code>utf-8</code>编码(utf-8编码中，汉字通常是3个字节，只有生僻的字符是4-6个字节)。</p>
</blockquote>
<p>作者 <a href="https://www.github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 05月 16日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建静态博客并部署到GitHub]]></title>
      <url>http://Res2013.github.io/ss/2016/05/14/GitHub%E4%B8%8A%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这篇文章主要是记录利用Hexo搭建静态博客并部署到GitHub.</p>
</blockquote>
<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p><strong>hexo</strong> 是一个基于<code>Node.js</code>的静态博客程序，代码托管在<a href="http://www.github.com" target="_blank" rel="external">GitHub</a>上。</p>
<h3 id="为什么用Hexo"><a href="#为什么用Hexo" class="headerlink" title="为什么用Hexo"></a>为什么用Hexo</h3><p><code>Hexo</code>简单优雅，而且风格多变，适合搭建个人博客，且支持多平台</p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装msysgit和node-js"><a href="#安装msysgit和node-js" class="headerlink" title="安装msysgit和node.js"></a>安装<a href="https://git-for-windows.github.io/" target="_blank" rel="external">msysgit</a>和<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></h3><p>利用<code>node.js</code>里自带的<code>npm</code>安装<code>hexo</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;blogfolder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;blogfolder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<h3 id="安装所依赖的插件"><a href="#安装所依赖的插件" class="headerlink" title="安装所依赖的插件"></a>安装所依赖的插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;blogfolder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>我目前用的是比较火的Next主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
<p>下载的主题放到<code>blogfolder</code>里的<code>thems/next</code>目录下</p>
<h3 id="配置站点的-config-yml文件"><a href="#配置站点的-config-yml文件" class="headerlink" title="配置站点的_config.yml文件"></a>配置站点的_config.yml文件</h3><p>复制过来的主题在<code>_config.yml</code>中配置,如:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: theme-name</span><br></pre></td></tr></table></figure>
<p>更多配置信息参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a>和<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">NexT主题配置文档</a></p>
<p>更多文章排版信息请访问<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">@Cmd Markdown编辑阅读器</a></p>
<h3 id="本地测试博客"><a href="#本地测试博客" class="headerlink" title="本地测试博客"></a>本地测试博客</h3><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generator// 可简写`hexo g`</span><br><span class="line">$ hexo server// 调试模式可以加上`--debug`,也可简写为`hexo s`</span><br></pre></td></tr></table></figure>
<p>通过<code>localhost:4000</code>本地访问博客站点</p>
<h3 id="部署博客到Github上"><a href="#部署博客到Github上" class="headerlink" title="部署博客到Github上"></a>部署博客到Github上</h3><blockquote>
<ul>
<li><p>前提条件是GitHub上已添加<code>SSH Key</code><a href="https://help.github.com/articles/checking-for-existing-ssh-keys/" target="_blank" rel="external">GitHub SSH Keys Guide</a></p>
</li>
<li><p>GitHub上新建一个项目,项目名必须为:<code>username.github.io</code></p>
</li>
</ul>
</blockquote>
<h4 id="配置站点的-config-yml文件-1"><a href="#配置站点的-config-yml文件-1" class="headerlink" title="配置站点的_config.yml文件"></a>配置站点的<code>_config.yml</code>文件</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="code">	type: git// Hexo更新到3.0以后type由github改成了git</span></span><br><span class="line"><span class="code">	repository: git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="code">	branch: master</span></span><br></pre></td></tr></table></figure>
<h4 id="部署到username-github-io项目上"><a href="#部署到username-github-io项目上" class="headerlink" title="部署到username.github.io项目上"></a>部署到<code>username.github.io</code>项目上</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy// 可简写为`hexo d`</span><br></pre></td></tr></table></figure>
<p>作者 <a href="https://github.com/Res2013" target="_blank" rel="external">@Res2013</a><br>2016 年 05月 14日</p>
]]></content>
    </entry>
    
  
  
</search>
